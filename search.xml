<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to BaoHua Blog ! This is My first post.</p>
<p>大家好，这是我的个人博客，这篇是我的第一篇博文，先熟悉一下编辑环境。本人主要学习Java开发，包含Java基础，Java框架知识, 数据库等,正在学习Vue.js、Golang、SpringCloud等前后端框架。 以后我会在这里分享各种学习心得和遇到的问题。</p>
<p>Hello everyone, this is my personal blog, this is my first blog, let’s get familiar with the editing environment. I mainly learn Java development, including Java foundation, Java framework knowledge, database, etc., and I am learning Vue.js, Golang, SpringCloud and other front-end frameworks. I will share my learning experience and problems here in the future.</p>
<p>More blog info : <a href="https://github.com/BrendanLi136/BrendanLi136.github.io">GitHub</a> 、<a href="https://blog.csdn.net/qq_43212296?spm=1001.2101.3001.5343">CSDN</a></p>
<h2 id="No-man-is-an-island"><a href="#No-man-is-an-island" class="headerlink" title="No man is an island."></a><center>No man is an island.</center></h2><h3 id="没有人是一座孤岛。"><a href="#没有人是一座孤岛。" class="headerlink" title="没有人是一座孤岛。"></a>没有人是一座孤岛。</h3>]]></content>
  </entry>
  <entry>
    <title>常用工具下载</title>
    <url>/2021/01/22/util/</url>
    <content><![CDATA[<h3 id="1-电脑搜索软件"><a href="#1-电脑搜索软件" class="headerlink" title="1.电脑搜索软件"></a>1.电脑搜索软件</h3><p>超好用的电脑搜索软件，Everything，赞爆！！！<br>点击下载 ：<a href="/2021/01/22/util/Everything.zip" title="[Everything]">[Everything]</a></p>
<h3 id="2-视频播放软件"><a href="#2-视频播放软件" class="headerlink" title="2.视频播放软件"></a>2.视频播放软件</h3><p>轻量级视频播放器，支持倍速，各种格式视频播放 PotPlayer<br>点击下载 ：<a href="/2021/01/22/util/PotPlayer.zip" title="[PotPlayerSetup]">[PotPlayerSetup]</a></p>
<h3 id="3-markdown编辑器"><a href="#3-markdown编辑器" class="headerlink" title="3.markdown编辑器"></a>3.markdown编辑器</h3><p>点击下载 ：<a href="/2021/01/22/util/typora-setup-x64.exe" title="[typora]">[typora]</a></p>
<h3 id="4-文本编辑器"><a href="#4-文本编辑器" class="headerlink" title="4.文本编辑器"></a>4.文本编辑器</h3><p>点击下载 ：<a href="/2021/01/22/util/npp_.exe" title="[Notepad++]">[Notepad++]</a></p>
<h3 id="5-格式化Json"><a href="#5-格式化Json" class="headerlink" title="5.格式化Json"></a>5.格式化Json</h3><p>点击下载 ：<a href="/2021/01/22/util/HiJson2.1.2_jdk64.exe" title="[HiJson]">[HiJson]</a></p>
<h3 id="6-Google-扩展插件"><a href="#6-Google-扩展插件" class="headerlink" title="6.Google 扩展插件"></a>6.Google 扩展插件</h3><h4 id="6-1-Vue"><a href="#6-1-Vue" class="headerlink" title="6.1 Vue"></a>6.1 Vue</h4><p>点击下载 ：<a href="/2021/01/22/util/Vue-Devtools-.zip" title="[Vue-Devtools]">[Vue-Devtools]</a></p>
<h4 id="6-2-Postman"><a href="#6-2-Postman" class="headerlink" title="6.2 Postman"></a>6.2 Postman</h4><p>点击下载 ：<a href="/2021/01/22/util/postman-4.1.2.rar" title="[postman]">[postman]</a></p>
<h3 id="7-脑图xmind"><a href="#7-脑图xmind" class="headerlink" title="7.脑图xmind"></a>7.脑图xmind</h3><p><a href="https://github.com/BrendanLi136/Util/releases">脑图xmind</a></p>
]]></content>
      <categories>
        <category>工具包</category>
      </categories>
      <tags>
        <tag>util</tag>
      </tags>
  </entry>
  <entry>
    <title>三、Docker实战</title>
    <url>/2020/10/23/Docker/DockerApply/</url>
    <content><![CDATA[<h1 id="Docker-安装Nginx"><a href="#Docker-安装Nginx" class="headerlink" title="Docker 安装Nginx"></a>Docker 安装Nginx</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 搜索镜像</span></span><br><span class="line">[root@baohua ~]# docker search nginx</span><br><span class="line">NAME          DESCRIPTION                   STARS           OFFICIAL            AUTOMATED</span><br><span class="line">nginx         Official build of Nginx.      13951           [OK]   </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 下载镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">bb79b6b2107f: Pull complete </span><br><span class="line">111447d5894d: Pull complete </span><br><span class="line">a95689b8e6cb: Pull complete </span><br><span class="line">1a0022e444c2: Pull complete </span><br><span class="line">32b7488a3833: Pull complete </span><br><span class="line">Digest: sha256:ed7f815851b5299f616220a63edac69a4cc200e7f536a56e421988da82e44ed8</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 运行测试</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  -d 后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name 给容器命名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 宿主机端口，容器内部端口</span></span><br><span class="line">[root@baohua ~]# docker run -d --name nginx01 -p 3344:80 nginx</span><br><span class="line">7da41ee1789c912de270afdf481683fecd6be97ec4d2990595a9c3845f3e58a1</span><br><span class="line">[root@baohua ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">7da41ee1789c        nginx               &quot;/docker-entrypoint.??   4 seconds ago       Up 3 seconds        0.0.0.0:3344-&gt;80/tcp   nginx01</span><br><span class="line">[root@baohua ~]# curl localhost:3344</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">[root@baohua ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">7da41ee1789c        nginx               &quot;/docker-entrypoint.??   8 minutes ago       Up 8 minutes        0.0.0.0:3344-&gt;80/tcp   nginx01</span><br><span class="line">[root@baohua ~]# docker exec -it nginx01 /bin/bash</span><br><span class="line">root@7da41ee1789c:/# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line">root@7da41ee1789c:/# cd /etc/nginx</span><br></pre></td></tr></table></figure>
<p>端口暴露的概念</p>
<p><img src="/2020/10/23/Docker/DockerApply/apply01.png" alt="1604325264690"></p>
<blockquote>
<p>思考：每次改动nginx配置文件，都需要进入容器内部。十分麻烦，要可以在外部提供一个映射路径，达到容器外部修改文件，容器内部自动修改。 -v 数据卷</p>
</blockquote>
<h1 id="Docker-安装tomcat"><a href="#Docker-安装tomcat" class="headerlink" title="Docker 安装tomcat"></a>Docker 安装tomcat</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 官方使用</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以前后台启动，停止了容器还在，可以查到。 docker run -it --rm 一般用来测试，用完即删除</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载再启动</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动运行</span></span><br><span class="line">docker run -it -p 8888:8080 --name tomcat01 tomcat:9.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试访问</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">[root@baohua ~]# docker exec -it tomcat01 /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>问题：1.linux命令少了，2.没有webapps  阿里云镜像的原因，默认是最小的镜像，所有不必要的都剔除</p>
<p>保证最小可运行的环境！</p>
</blockquote>
<h1 id="Docker-部署-es-kibana"><a href="#Docker-部署-es-kibana" class="headerlink" title="Docker 部署 es+kibana"></a>Docker 部署 es+kibana</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> es 暴露的端口很多</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> es 十分的耗内存</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> es 的数据一般放置在安全目录！挂载</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --net somenetwork ？ 网络配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 elasticsearch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name elasticsearch  -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> elasticsearch:7.6.2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卡住， docker stats 查看cpu的状态</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 增加内存的限制，修改配置文件 -e 环境配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name elasticsearch  -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> -e ES_JAVA_OPTS=<span class="string">&#x27;-Xms64m -Xmx512m&#x27;</span> elasticsearch:7.6.2</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>问题: 如何通过kibana连接过去</p>
</blockquote>
<h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><ul>
<li>portainer </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9000:9000 \</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br></pre></td></tr></table></figure>
<ul>
<li>Rancher (CI/CD )</li>
</ul>
<p><strong>什么是portainer ？</strong></p>
<p>Docker 图形化界面管理工具！提供一个后台面板供我们操作。</p>
<p>通过 ip:9000访问</p>
<ul>
<li>登录界面，初始化密码即可</li>
</ul>
<p><img src="/2020/10/23/Docker/DockerApply/apply02.png" alt="1605320165889"></p>
<ul>
<li><p>选择本地的即可</p>
<p><img src="/2020/10/23/Docker/DockerApply/apply03.png" alt="1605320287569"></p>
</li>
<li><p>可视化界面</p>
<p><img src="/2020/10/23/Docker/DockerApply/apply04.png" alt="1605320420644"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>七、DockerCompose</title>
    <url>/2020/11/21/Docker/DockerCompose/</url>
    <content><![CDATA[<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>docker compose来轻松高效的管理容器，定义运行多个容器。</p>
<blockquote>
<p>官方介绍</p>
</blockquote>
<p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration. To learn more about all the features of Compose, see <a href="https://docs.docker.com/compose/#features">the list of features</a>.</p>
<p>Compose works in all environments: production, staging, development, testing, as well as CI workflows. You can learn more about each case in <a href="https://docs.docker.com/compose/#common-use-cases">Common Use Cases</a>.</p>
<p>Using Compose is basically a three-step process:</p>
<ol>
<li>Define your app’s environment with a <code>Dockerfile</code> so it can be reproduced anywhere.</li>
<li>Define the services that make up your app in <code>docker-compose.yml</code> so they can be run together in an isolated environment.</li>
<li>Run <code>docker-compose up</code> and Compose starts and runs your entire app.</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 官方</span></span><br><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加速</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 改变权限</span></span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>
<h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><ol>
<li>创建项目目录 composteset    在composteset下创建文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir composetest</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> composetest</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>app.py        python应用，计数器，redis，flask</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建app.py</span></span><br><span class="line">[root@baohua composetest]# vim app.py</span><br><span class="line">[root@baohua composetest]# cat app.py</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">import redis</span><br><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=&#x27;redis&#x27;, port=6379)</span><br><span class="line"></span><br><span class="line">def get_hit_count():</span><br><span class="line">    retries = 5</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            return cache.incr(&#x27;hits&#x27;)</span><br><span class="line">        except redis.exceptions.ConnectionError as exc:</span><br><span class="line">            if retries == 0:</span><br><span class="line">                raise exc</span><br><span class="line">            retries -= 1</span><br><span class="line">            time.sleep(0.5)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def hello():</span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    return &#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;.format(count)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>requirements.txt        依赖</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建 requirements.txt 文件</span></span><br><span class="line">[root@baohua composetest]# vim requirements.txt </span><br><span class="line">[root@baohua composetest]# cat requirements.txt </span><br><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>创建Dockerfile</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua composetest]# vim Dockerfile</span><br><span class="line">[root@baohua composetest]# cat Dockerfile </span><br><span class="line">FROM python:3.7-alpine</span><br><span class="line">WORKDIR /code</span><br><span class="line">ENV FLASK_APP=app.py</span><br><span class="line">ENV FLASK_RUN_HOST=0.0.0.0</span><br><span class="line">RUN apk add --no-cache gcc musl-dev linux-headers</span><br><span class="line">COPY requirements.txt requirements.txt</span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">EXPOSE 5000</span><br><span class="line">COPY . .</span><br><span class="line">CMD [&quot;flask&quot;, &quot;run&quot;]</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>docker-compose.yml</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@baohua</span> <span class="string">composetest</span>]<span class="comment"># vim docker-compose.yml</span></span><br><span class="line">[<span class="string">root@baohua</span> <span class="string">composetest</span>]<span class="comment"># cat docker-compose.yml </span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure>


<ol start="6">
<li>测试启动<br> docker-compose up</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试访问</span> </span><br><span class="line">curl localhost:5000</span><br></pre></td></tr></table></figure>


<h2 id="yaml-规则"><a href="#yaml-规则" class="headerlink" title="yaml 规则"></a>yaml 规则</h2><p>docker-compose.yaml 核心</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 三层</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;&quot;</span> <span class="comment"># 版本</span></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 服务</span></span><br><span class="line">  <span class="string">服务1:</span> <span class="string">web</span></span><br><span class="line">	<span class="comment"># 服务配置</span></span><br><span class="line">	<span class="string">images</span></span><br><span class="line">	<span class="string">build</span></span><br><span class="line">	<span class="string">network</span></span><br><span class="line">	<span class="string">...</span></span><br><span class="line">  <span class="string">服务2:</span> <span class="string">redis</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">  <span class="string">服务3:</span> <span class="string">...</span></span><br><span class="line"> <span class="comment"># 其他配置	网络/卷、全局规则</span></span><br><span class="line"> <span class="attr">volumes:</span></span><br></pre></td></tr></table></figure>


<h2 id="使用Dokcer-Compose-搭建博客"><a href="#使用Dokcer-Compose-搭建博客" class="headerlink" title="使用Dokcer Compose 搭建博客"></a>使用Dokcer Compose 搭建博客</h2><p><a href="https://docs.docker.com/compose/wordpress/">WordPress Document</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua build]# ls</span><br><span class="line">composetest  idea  tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建 工作目录</span></span><br><span class="line">[root@baohua build]# mkdir my_wordpress</span><br><span class="line">[root@baohua build]# cd my_wordpress/</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 docker-compose.yml 文件</span></span><br><span class="line">[<span class="string">root@baohua</span> <span class="string">my_wordpress</span>]<span class="comment"># vim docker-compose.yml </span></span><br><span class="line">[<span class="string">root@baohua</span> <span class="string">my_wordpress</span>]<span class="comment"># cat docker-compose.yml </span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">   <span class="attr">db:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">     <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line">       <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">wordpress:</span></span><br><span class="line">     <span class="attr">depends_on:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;8000:80&quot;</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_NAME:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">db_data:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行</span> </span><br><span class="line">[root@baohua my_wordpress]# docker-compose up -d</span><br><span class="line">Pulling db (mysql:5.7)...</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">852e50cd189d: Pull complete</span><br><span class="line">29969ddb0ffb: Pull complete</span><br><span class="line">a43f41a44c48: Pull complete</span><br><span class="line">5cdd802543a3: Pull complete</span><br><span class="line">b79b040de953: Pull complete</span><br></pre></td></tr></table></figure>
<ul>
<li>登录 ip : 8080,选择语言</li>
</ul>
<p><img src="/2020/11/21/Docker/DockerCompose/com-20201206140852868.png" alt="image-20201206140852868"></p>
<ul>
<li>设置标题。建站</li>
</ul>
<p><img src="/2020/11/21/Docker/DockerCompose/com-20201206141839585.png" alt="image-20201206141839585"></p>
<ul>
<li>登录即可</li>
</ul>
<p><img src="/2020/11/21/Docker/DockerCompose/com-20201206141916314.png" alt="image-20201206141916314"></p>
<p><img src="/2020/11/21/Docker/DockerCompose/com-20201206142008311.png" alt="image-20201206142008311"></p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><ul>
<li>编写java服务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.composetest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2020/12/6 13:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Long views = stringRedisTemplate.opsForValue().increment(<span class="string">&quot;views&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;welcome views: &quot;</span>+views;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>编写Dockerfile 文件</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> *.jar /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;--server,port=8080&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>] </span></span><br></pre></td></tr></table></figure>
<ul>
<li>编写docker-compose.yaml 文件</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">baohuaapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">baohuaapp</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure>
<p>可以使用 docker-compose up –build 使项目重新编译</p>
<h1 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h1><p><img src="/2020/11/21/Docker/DockerCompose/com-20201206151220818.png" alt="image-20201206151220818"></p>
<h1 id="Docker-Secret"><a href="#Docker-Secret" class="headerlink" title="Docker Secret"></a>Docker Secret</h1><h1 id="Docker-config"><a href="#Docker-config" class="headerlink" title="Docker config"></a>Docker config</h1><h1 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h1>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>二、Docker镜像</title>
    <url>/2020/10/20/Docker/DockerImage/</url>
    <content><![CDATA[<h1 id="Docker-镜像原理"><a href="#Docker-镜像原理" class="headerlink" title="Docker 镜像原理"></a>Docker 镜像原理</h1><h3 id="镜像概念"><a href="#镜像概念" class="headerlink" title="镜像概念"></a>镜像概念</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件</p>
<p>如何得到镜像</p>
<ul>
<li>从仓库下载</li>
<li>朋友拷贝</li>
<li>自己制作</li>
</ul>
<h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><h4 id="UnionFS（联合文件系统）"><a href="#UnionFS（联合文件系统）" class="headerlink" title="UnionFS（联合文件系统）"></a>UnionFS（联合文件系统）</h4><p>​    UnionS（联合文件系统）：Union文件系统（ UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的加，同时可以将不同目录挂载到同一个虛拟文件系统下（unite several directories into a single virtual filesystem）。 Union文件系统是 Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。<br>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p>
<h4 id="Docker镜像加载原理-1"><a href="#Docker镜像加载原理-1" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h4><p>​    docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。<br>​    bootfs  (boot file system) 主要包含bootloader和kernel，bootloader 主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在 Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就存在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。<br>​    roorfs （root file system），在bootfs之上。包含的就是典型Linux系统中的 /dev ，/proc，/bin ，/etx 等标准的目录和文件。rootfs就是各种不同的操作系统发行版。比如Ubuntu，Centos等等。</p>
<p> <img src="/2020/10/20/Docker/DockerImage/img01.png" alt="img"> </p>
<p>​    对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host（宿主机）的kernel，自己只需要提供rootfs就行了，由此可见对于不同的Linux发行版，bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs。<br>​    对于安装虚拟机的压缩包都是很大的，而Docker的镜像却很小 </p>
<p>虚拟机是分钟级, 容器是秒级。</p>
<h3 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h3><p><img src="/2020/10/20/Docker/DockerImage/img02.png" alt="1605321237904"></p>
<p>​     这样最大的好处就是资源共享，例如很多个镜像都从相同的 Base 镜像构建而来，而宿主机只需要在磁盘上保留一份 base 镜像，同时内存中也只需要加载一份 base 镜像，这样就可以为所有的人容器服务了，而且镜像的每一层都可以被共享 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua ~]# docker inspect redis</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;sha256:62f1d3402b787aebcd74aaca5df9d5fe5e8fe4c0706d148a963c70d74a497e51&quot;,</span><br><span class="line">        &quot;RepoTags&quot;: [</span><br><span class="line">            &quot;redis:latest&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;RepoDigests&quot;: [</span><br><span class="line">            &quot;redis@sha256:a0494b60a0bc6de161d26dc2d2f9d2f1c5435e86a9e5d48862a161131affa6bd&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;Parent&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Comment&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-10-27T18:33:23.01070793Z&quot;,</span><br><span class="line">        &quot;Container&quot;: &quot;765b5889ba2fc5524c9637bff2e95006deecd8686fbf6d604bce3d131170f4a7&quot;,</span><br><span class="line">        &quot;ContainerConfig&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;765b5889ba2f&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;6379/tcp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class="line">                &quot;GOSU_VERSION=1.12&quot;,</span><br><span class="line">                &quot;REDIS_VERSION=6.0.9&quot;,</span><br><span class="line">                &quot;REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.9.tar.gz&quot;,</span><br><span class="line">                &quot;REDIS_DOWNLOAD_SHA=dc2bdcf81c620e9f09cfd12e85d3bc631c897b2db7a55218fd8a65eaa37f86dd&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;#(nop) &quot;,</span><br><span class="line">                &quot;CMD [\&quot;redis-server\&quot;]&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ArgsEscaped&quot;: true,</span><br><span class="line">            &quot;Image&quot;: &quot;sha256:860b12ba2c6171de94abe2f78d1f166ed49b34b53a752db019cc369315940bfb&quot;,</span><br><span class="line">            &quot;Volumes&quot;: &#123;</span><br><span class="line">                &quot;/data&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;/data&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: [</span><br><span class="line">                &quot;docker-entrypoint.sh&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;DockerVersion&quot;: &quot;18.09.7&quot;,</span><br><span class="line">        &quot;Author&quot;: &quot;&quot;,</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;ExposedPorts&quot;: &#123;</span><br><span class="line">                &quot;6379/tcp&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;,</span><br><span class="line">                &quot;GOSU_VERSION=1.12&quot;,</span><br><span class="line">                &quot;REDIS_VERSION=6.0.9&quot;,</span><br><span class="line">                &quot;REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.9.tar.gz&quot;,</span><br><span class="line">                &quot;REDIS_DOWNLOAD_SHA=dc2bdcf81c620e9f09cfd12e85d3bc631c897b2db7a55218fd8a65eaa37f86dd&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;redis-server&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ArgsEscaped&quot;: true,</span><br><span class="line">            &quot;Image&quot;: &quot;sha256:860b12ba2c6171de94abe2f78d1f166ed49b34b53a752db019cc369315940bfb&quot;,</span><br><span class="line">            &quot;Volumes&quot;: &#123;</span><br><span class="line">                &quot;/data&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;/data&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: [</span><br><span class="line">                &quot;docker-entrypoint.sh&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: null</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Architecture&quot;: &quot;amd64&quot;,</span><br><span class="line">        &quot;Os&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;Size&quot;: 104244824,</span><br><span class="line">        &quot;VirtualSize&quot;: 104244824,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/20ba47aef6471e3ada49cc1b7b5871a9796bf5a39a863add5f723d2133a317cb/diff:/var/lib/docker/overlay2/968c3fb515aed51c3cff416f2c1ae9d94b824bec67636c10bc20e6ff41b10f2d/diff:/var/lib/docker/overlay2/80af422927ab90c36b1461647113759d7e0df90e4c98553e0fe40b9c14d0cee6/diff:/var/lib/docker/overlay2/49e19ce4e67f386a7e100e10a585742ba1421a48778ea827fed7d0ab5d934efa/diff:/var/lib/docker/overlay2/5aa271d01b3f256bb09f5e951d5631823801114763b13b11ce13434f0261e6b9/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/3c956e7f8a71152f5ad5515dfc9e1c18dc22bcf67fee172baecc36fc6e8a800b/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/3c956e7f8a71152f5ad5515dfc9e1c18dc22bcf67fee172baecc36fc6e8a800b/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/3c956e7f8a71152f5ad5515dfc9e1c18dc22bcf67fee172baecc36fc6e8a800b/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;RootFS&quot;: &#123;</span><br><span class="line">            &quot;Type&quot;: &quot;layers&quot;,</span><br><span class="line">            &quot;Layers&quot;: [</span><br><span class="line">                &quot;sha256:d0fe97fa8b8cefdffcef1d62b65aba51a6c87b6679628a2b50fc6a7a579f764c&quot;,</span><br><span class="line">                &quot;sha256:832f21763c8e6b070314e619ebb9ba62f815580da6d0eaec8a1b080bd01575f7&quot;,</span><br><span class="line">                &quot;sha256:223b15010c47044b6bab9611c7a322e8da7660a8268949e18edde9c6e3ea3700&quot;,</span><br><span class="line">                &quot;sha256:6a9976a8f40851f45dc8c68a04b130e90522f46bb7e8403c6e7eb4331674f213&quot;,</span><br><span class="line">                &quot;sha256:c875a9fc3ec72b140e325e1a1b3b57d299b91811e8288a07c6b788b0d7cba185&quot;,</span><br><span class="line">                &quot;sha256:d9364cb75b1a364fbcb97b2f51332fc012ae0321e18c3fd3811f5e5a9f8a2d0e&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Metadata&quot;: &#123;</span><br><span class="line">            &quot;LastTagTime&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ul>
<li>查看Layers分层</li>
</ul>
<h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><p>​    所有的 Docker镜像都起始于一个基础镜像层，进行修改或增加新的内容时，就会在当前的镜像层之上，创建新的镜像层。<br>​    举一个简单的例子，假如基于 Ubuntu linux16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加Python包就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层该镜像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）</p>
<p> <img src="/2020/10/20/Docker/DockerImage/img03.png" alt="img"> </p>
<p>​     在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而镜像包含了来自两个镜像层的6个文件 </p>
<p> <img src="/2020/10/20/Docker/DockerImage/img04.png" alt="img"> </p>
<p> 上图中的镜像层跟之前图中的略有区别，主要目的是便于展示文件。<br>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版 </p>
<p> <img src="/2020/10/20/Docker/DockerImage/img05.png" alt="img"> </p>
<p>​    这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。<br>​    Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外屐示为统一的文件系统<br>​    Linux上可用的存储引擎有AUFS、 Overlay2、 Device Mapper、Btfs以及ZFS 。顾名思义，每种存储引擎都基于 Linux中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。<br>Docker在 Windows上仅支持 windowsfilter 一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW。<br>下图展示了与系统显示相同的三层镜像。所有镜像层堆并合并，对外提供统一的视图 </p>
<p> <img src="/2020/10/20/Docker/DockerImage/img06.png" alt="img"> </p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>Docker镜像都是只读的，当容器启动时新的可写层被加载到镜像的顶部，这一层就是我们通常说的容器层，容器之下的都叫镜像层</p>
<p><img src="/2020/10/20/Docker/DockerImage/img07.png" alt="1605321599722"></p>
<h1 id="commit-提交"><a href="#commit-提交" class="headerlink" title="commit 提交"></a>commit 提交</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit 提交容器成为一个新版本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令和git原理类似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动默认的tomcat</span> </span><br><span class="line">[root@baohua ~]# docker run -it -p 8888:8080 tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认的tomcat没有webpp下的app ，拷贝disk下至webapp下</span></span><br><span class="line">root@4b3e3d3f765a:/usr/local/tomcat# cp -r webapps.dist/* webapps/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将修改后的容器提交</span></span><br><span class="line">[root@baohua ~]# docker commit -a=&quot;baohua&quot; -m=&quot;add application&quot; 4b3e3d3f765a tomcat008:1.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交为一个镜像！以后使用修改后的镜像即可。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/20/Docker/DockerImage/img08.png" alt="1605322715952"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>五、DockerFile</title>
    <url>/2020/11/05/Docker/DockerFile/</url>
    <content><![CDATA[<h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><p>DockerFile 介绍</p>
<p>dockerfile 是用来构建docker镜像的文件！命令参数脚本！</p>
<p>构建步骤：</p>
<ol>
<li>编写一个 dockerfile 文件</li>
<li> docker build 构建成为一个镜像</li>
<li> docker run 运行镜像</li>
<li> docker push 发布镜像 （ DockerHub、阿里云镜像仓库！）</li>
</ol>
<p>查看官方操作？</p>
<p><img src="/2020/11/05/Docker/DockerFile/image-20201122142215476.png" alt="image-20201122142215476"></p>
<p><img src="/2020/11/05/Docker/DockerFile/image-20201122164810302.png" alt="image-20201122164810302"></p>
<p>很多官方镜像都是基础包，很多功能没有，我们通常会自己搭建自己的镜像！</p>
<h2 id="DockerFile-构建过程"><a href="#DockerFile-构建过程" class="headerlink" title="DockerFile 构建过程"></a>DockerFile 构建过程</h2><p><strong>基础知识</strong>：</p>
<ol>
<li><p>每个保留关键字（指令）都是必须大写字母</p>
</li>
<li><p>执行从上到下顺序执行</p>
</li>
<li><p># 表示注释</p>
</li>
<li><p>每一个指令都会创建提交一个镜像层，并提交！</p>
</li>
</ol>
<p><img src="/2020/11/05/Docker/DockerFile/image-97d92202f9d8d19a2bd80800c8bb5757.png" alt="img"></p>
<ul>
<li>dockerfile是面向开发的，以后发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</li>
<li>DockerFile ： 构建文件，定义了一切的步骤，源代码</li>
<li>DockerImages : 通过DockerFile 构建生成的镜像，最终发布和运行的产品！</li>
<li>Docker容器：容器就是镜像运行起来提供服务器</li>
</ul>
<h2 id="DockerFile-的指令"><a href="#DockerFile-的指令" class="headerlink" title="DockerFile 的指令"></a>DockerFile 的指令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM		# 基础镜像，一切从这里开始构建</span><br><span class="line">MAINTAINER	# 镜像谁写的，姓名+邮箱</span><br><span class="line">RUN			# 镜像构建的时候需要运行的命令</span><br><span class="line">ADD			# 步骤，tomcat镜像。tomcat压缩包。添加内容</span><br><span class="line">WORKDIR		# 镜像的工作目录</span><br><span class="line">VOLUME		# 挂载的目录位置</span><br><span class="line">EXPOSE		# 暴露端口</span><br><span class="line">CMD			# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT	# 指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class="line">ONBUILD		# 当构建一个被继承 DockerFile 这个时候就会运行 ONBUILD 的指令。触发指令。</span><br><span class="line">COPY		# 类似ADD，将我们文件拷贝到镜像中</span><br><span class="line">ENV			# 构建的时候设置环境变量</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/05/Docker/DockerFile/6870990-744e06b25e051ac7.png" alt="img"></p>
<h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h2><p>Docker Hub 中 99% 镜像都是从这个基础镜像过来的 <code>FROM scratch</code> ，然后进行配置以及软件来进行构建。</p>
<h3 id="制作一个自己centos镜像"><a href="#制作一个自己centos镜像" class="headerlink" title="制作一个自己centos镜像"></a>制作一个自己centos镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile</span></span><br><span class="line">[root@baohua dockerfile]# cat mydockerfile </span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">MAINTAINER baohua&lt;136163022@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;---end---end&quot;</span><br><span class="line">CMD /bin/bash </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">[root@baohua dockerfile]# docker build -f mydockerfile -t mycentos:0.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过文件构建镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker build -f dockerfile文件路径 -t 镜像名:[tag]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试运行</span></span><br><span class="line">Successfully built 79cedcf5e693</span><br><span class="line">Successfully tagged mycentos:0.1</span><br></pre></td></tr></table></figure>
<p><strong>对比：</strong> 原生的centos</p>
<p><img src="/2020/11/05/Docker/DockerFile/image-20201122182856956.png" alt="image-20201122182856956"></p>
<p>增加之后的centos ，默认进入/usr/local ,有命令了！！！</p>
<p><img src="/2020/11/05/Docker/DockerFile/image-20201122183123074.png" alt="image-20201122183123074"></p>
<p>可以通过 docker history 容器id 列出变更历史</p>
<p><img src="/2020/11/05/Docker/DockerFile/image-20201122183236770.png" alt="image-20201122183236770"></p>
<h3 id="CMD-和-ENTRYPOINT-的区别"><a href="#CMD-和-ENTRYPOINT-的区别" class="headerlink" title="CMD 和 ENTRYPOINT 的区别"></a>CMD 和 ENTRYPOINT 的区别</h3> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CMD			# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT	# 指定这个容器启动的时候要运行的命令，可以追加命令</span><br></pre></td></tr></table></figure>
<ul>
<li>测试CMD</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写 dockerfile 文件</span></span><br><span class="line">[root@baohua dockerfile]# vim dockerfile-cmd </span><br><span class="line">[root@baohua dockerfile]# cat dockerfile-cmd </span><br><span class="line">FROM centos</span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">[root@baohua dockerfile]# docker build -f dockerfile-cmd -t cmdtest .</span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0d120b6ccaa8</span></span><br><span class="line">Step 2/2 : CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> cadeb9574fc7</span></span><br><span class="line">Removing intermediate container cadeb9574fc7</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> e4545de53e54</span></span><br><span class="line">Successfully built e4545de53e54</span><br><span class="line">Successfully tagged cmdtest:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> run 运行，发现ls -a命令生效</span></span><br><span class="line">[root@baohua dockerfile]# docker run e4545de53e54</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 想追加一个命令 -l ls -al</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> [root@baohua dockerfile]<span class="comment"># docker run e4545de53e54 -l</span></span></span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused &quot;exec: \&quot;-l\&quot;: executable file not found in $PATH&quot;: unknown.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cmd的清理下 -l 替换了CMD  [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>] 命令，-l 不是命令所以报错</span></span><br></pre></td></tr></table></figure>
<ul>
<li>测试 ENTRYPOINT</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua dockerfile]# cat dockerfile-entrypoint </span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line">[root@baohua dockerfile]# docker build -f dockerfile-entrypoint -t entryponittest . </span><br><span class="line">Sending build context to Docker daemon  4.096kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0d120b6ccaa8</span></span><br><span class="line">Step 2/2 : ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> f5e11aca5a6f</span></span><br><span class="line">Removing intermediate container f5e11aca5a6f</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 309af04008f6</span></span><br><span class="line">Successfully built 309af04008f6</span><br><span class="line">Successfully tagged entryponittest:latest</span><br><span class="line">[root@baohua dockerfile]# docker run 309af04008f6</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 追加命令，是直接拼接 ENTRYPOINT 的后面的</span></span><br><span class="line">[root@baohua dockerfile]# docker run 309af04008f6 -l</span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x  1 root root 4096 Nov 22 10:23 .</span><br><span class="line">drwxr-xr-x  1 root root 4096 Nov 22 10:23 ..</span><br><span class="line">-rwxr-xr-x  1 root root    0 Nov 22 10:23 .dockerenv</span><br><span class="line">lrwxrwxrwx  1 root root    7 May 11  2019 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x  5 root root  340 Nov 22 10:23 dev</span><br><span class="line">drwxr-xr-x  1 root root 4096 Nov 22 10:23 etc</span><br><span class="line">drwxr-xr-x  2 root root 4096 May 11  2019 home</span><br><span class="line">lrwxrwxrwx  1 root root    7 May 11  2019 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx  1 root root    9 May 11  2019 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------  2 root root 4096 Aug  9 21:40 lost+found</span><br><span class="line">drwxr-xr-x  2 root root 4096 May 11  2019 media</span><br><span class="line">drwxr-xr-x  2 root root 4096 May 11  2019 mnt</span><br><span class="line">drwxr-xr-x  2 root root 4096 May 11  2019 opt</span><br><span class="line">dr-xr-xr-x 97 root root    0 Nov 22 10:23 proc</span><br><span class="line">dr-xr-x---  2 root root 4096 Aug  9 21:40 root</span><br><span class="line">drwxr-xr-x 11 root root 4096 Aug  9 21:40 run</span><br><span class="line">lrwxrwxrwx  1 root root    8 May 11  2019 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x  2 root root 4096 May 11  2019 srv</span><br><span class="line">dr-xr-xr-x 13 root root    0 Nov 21 07:19 sys</span><br><span class="line">drwxrwxrwt  7 root root 4096 Aug  9 21:40 tmp</span><br><span class="line">drwxr-xr-x 12 root root 4096 Aug  9 21:40 usr</span><br><span class="line">drwxr-xr-x 20 root root 4096 Aug  9 21:40 var</span><br></pre></td></tr></table></figure>
<p>对比+测试得出结论！！！</p>
<h2 id="Tomcat-镜像"><a href="#Tomcat-镜像" class="headerlink" title="Tomcat 镜像"></a>Tomcat 镜像</h2><ol>
<li> 准备镜像文件 tomcat 压缩包，jdk的压缩包！</li>
</ol>
<p><img src="/2020/11/05/Docker/DockerFile/image-20201122190714150.png" alt="image-20201122190714150"></p>
<ol start="2">
<li>编写dockerfile文件，官方命名<code>Dockerfile</code> , build 会自动寻找这个文件，就不需要 -f 指定了！</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">MAINTAINER baohua&lt;136163022@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u241-linux-x64.tar.gz /usr/local</span><br><span class="line">ADD apache-tomcat-8.5.51.tar.gz /usr/local</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_241</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-8.5.51</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-8.5.51</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin:$CATALINA_HOME:/lib</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-8.5.51/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-8.5.51/bin/logs/catalina.out</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>构建镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker build -t diytomcat .</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看构建的镜像</span></span><br><span class="line">[root@baohua tomcat]# docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">diytomcat             0.1                 d0684f97ba66        2 days ago          691MB</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>启动测试</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name baohuatomcat -v /home/baohua/build/tomcat/webapps/test:/usr/local/apache-tomcat-8.5.51/webapps/test -v /home/baohua/build/tomcat/apache-tomcat-8.5.51/logs:/usr/local/apache-tomcat-8.5.51/logs diytomcat:0.1</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><p>访问测试</p>
</li>
<li><p>发布项目( 由于做了卷挂载，直接在本地编写项目就可以发布了)</p>
<p><code>web.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd &quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>index.jsp</code></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=utf-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;home&lt;/title&gt;</span><br><span class="line">&lt;style&gt; </span><br><span class="line">   *&#123;</span><br><span class="line">    padding:<span class="number">0</span>;</span><br><span class="line">    margin:<span class="number">0</span>;</span><br><span class="line">    font-family:<span class="string">&quot;微??潞?;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.header&#123;</span></span><br><span class="line"><span class="string">    height:72px;</span></span><br><span class="line"><span class="string">    background:#458fce ;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.header .logo&#123;</span></span><br><span class="line"><span class="string">    color:#fff ;</span></span><br><span class="line"><span class="string">    line-height:70px;</span></span><br><span class="line"><span class="string">    font-size:30px;</span></span><br><span class="line"><span class="string">    margin-left:20px;</span></span><br><span class="line"><span class="string">    display:inline-block;</span></span><br><span class="line"><span class="string">    text-align:center;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">a &#123;</span></span><br><span class="line"><span class="string">    color: #fff ;</span></span><br><span class="line"><span class="string">    text-decoration: none ;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.header .login&#123;</span></span><br><span class="line"><span class="string">    float:right;</span></span><br><span class="line"><span class="string">    color:#fff ;</span></span><br><span class="line"><span class="string">    line-height:72px;</span></span><br><span class="line"><span class="string">    margin-right:2px;</span></span><br><span class="line"><span class="string">    display:inline-block;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.banner&#123;</span></span><br><span class="line"><span class="string">    height:380px;</span></span><br><span class="line"><span class="string">    overflow:hidden;</span></span><br><span class="line"><span class="string">    background: #ddd;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;</span>header<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;</span>logo<span class="string">&quot;&gt;webapp</span></span><br><span class="line"><span class="string">        &lt;div class =&quot;</span>login<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;a href =&quot;</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>)<span class="string">&quot;&gt;catalog&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;span&gt;|&lt;/span&gt; </span></span><br><span class="line"><span class="string">            &lt;a href =&quot;</span>javascript:<span class="keyword">void</span>(<span class="number">0</span>)<span class="string">&quot;&gt;java&lt;a&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/05/Docker/DockerFile/image-20201128124838006.png" alt="image-20201128124838006"></p>
</li>
</ol>
<p>==部署成功后，访问测试OK==</p>
<h2 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h2><blockquote>
<p>Docker Hub</p>
</blockquote>
<ol>
<li><a href="https://hub.docker.com/">https://hub.docker.com/</a> 注册自己的账号 (确保可以登录)</li>
<li>在服务器上提交自己的镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua /]# docker login --help</span><br><span class="line"></span><br><span class="line">Usage:	docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录成功</span> </span><br><span class="line">[root@baohua /]# docker login -u baohua</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>登录成功后就可以提交镜像了，docker push</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> push 自己的镜像到服务器上</span></span><br><span class="line">[root@baohua /]# docker push diytomcat</span><br><span class="line">The push refers to repository [docker.io/library/diytomcat]</span><br><span class="line">2cb8e7d7b3ba: Preparing </span><br><span class="line">bad401b6e037: Preparing </span><br><span class="line">a7d865675a27: Preparing </span><br><span class="line">73b5acd31424: Preparing </span><br><span class="line">291f6e44771a: Preparing </span><br><span class="line">denied: requested access to the resource is denied # 拒绝</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 带上自己的信息以及TAG 版本号</span></span><br><span class="line"></span><br><span class="line">[root@baohua /]# docker push baohua/diytomcat:0.1</span><br><span class="line">The push refers to repository [docker.io/baohua/diytomcat]</span><br><span class="line">An image does not exist locally with the tag: baohua/diytomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">增加一个tag</span></span><br><span class="line">[root@baohua /]# docker tag d0684f97ba66 baohua/diytomcat:0.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> push上去即可</span></span><br><span class="line">[root@baohua /]# docker push baohua/diytomcat:0.1</span><br><span class="line">The push refers to repository [docker.io/baohua/diytomcat]</span><br><span class="line">2cb8e7d7b3ba: Pushing [&gt;                                                  ]  1.107MB/57.23MB</span><br><span class="line">bad401b6e037: Pushing [====&gt;                                              ]  1.288MB/14.64MB</span><br><span class="line">a7d865675a27: Pushing [&gt;                                                  ]  1.606MB/403.7MB</span><br><span class="line">73b5acd31424: Pushed </span><br><span class="line">291f6e44771a: Pushing [=&gt;                                                 ]  5.462MB/215.1MB</span><br></pre></td></tr></table></figure>


<p>也可发布至阿里云服务器</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>六、DockerNet</title>
    <url>/2020/11/19/Docker/DockerNet/</url>
    <content><![CDATA[<h1 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h1><h2 id="理解Docker0"><a href="#理解Docker0" class="headerlink" title="理解Docker0"></a>理解Docker0</h2><blockquote>
<p>测试</p>
</blockquote>
<p><img src="/2020/11/19/Docker/DockerNet/net-20201128142202091.png" alt="net-20201128142202091"></p>
<p>三个网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 问题：docker 如何处理容器访问的？</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua ~]# docker run -d -P --name tomcat01 tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看容器的内部网路地址 ip addr ， 发现容器启动的时候会得到一个 eth0@if113 的ip地址，docker分配的。</span></span><br><span class="line">[root@baohua ~]# docker exec -it tomcat01 ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">112: eth0@if113: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta">#</span><span class="bash"> linux 可以ping通 docker 内部。</span></span><br><span class="line">[root@baohua ~]# ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.068 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.046 ms</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原理</p>
</blockquote>
<ol>
<li><p>每启动一个docker 容器，docker 就会给docker容器分配一个ip，只要安装了docker，就会有一个网卡docker0桥接模式，使用的技术是veth-pair技术！</p>
<p><code>再次测试 ip addr</code></p>
</li>
</ol>
<p><img src="/2020/11/19/Docker/DockerNet/image-20201128144043900.png" alt="image-20201128144043900"></p>
<p><code>再启动一个容器测试</code>,发现又多了一对网卡</p>
<p><img src="/2020/11/19/Docker/DockerNet/image-20201128144513823.png" alt="image-20201128144513823"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 发现容器带来的网卡，都是一对对的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> veth-pair 就是一堆的虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相连。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 正因为这个特性，veth-pair 充当一个桥梁，连接着各种虚拟网络设备的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OpenStac，Docker 容器之间的连接，OVS的连接，都是	veth-pair的技术。</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>测试tomcat01 和 tomcat02 是否可以ping 通</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua ~]# docker exec -it tomcat02 ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.083 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.053 ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结论，容器之间是可以互相ping 通的。</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/19/Docker/DockerNet/image-20201128151118502.png" alt="image-20201128151118502"></p>
<p>结论：tomcat01 和 tomcat02 是公用的一个路由器，docker0</p>
<p>所有的容器不指定网络的情况下，都是docker0 路由的，docker会给我们的容器分配一个默认的可用IP</p>
<blockquote>
<p>小结</p>
</blockquote>
<p>Docker 使用的是Linux的桥接，宿主机是一个Docker 容器的网桥 docker0</p>
<p><img src="/2020/11/19/Docker/DockerNet/image-20201128152416923.png" alt="image-20201128152416923"></p>
<p>Docker 中的所有的网络接口都是虚拟的，虚拟的转发效率高。</p>
<p>只要容器删除，对应网桥一对就没了！</p>
<p><img src="/2020/11/19/Docker/DockerNet/image-20201128154036638.png" alt="image-20201128154036638"></p>
<h2 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h2><blockquote>
<p>思考场景，编写微服务 database url = ip；项目不重启，ip换掉了，是否可以用名字来进行访问容器。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua ~]# docker exec -it tomcat01 ping tomcat02</span><br><span class="line">ping: tomcat02: Name or service not known</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如何解决这个问题！</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 --link 可以解决了网络连通问题。</span></span><br><span class="line">[root@baohua ~]# docker run -d -P --name tomcat03 --link tomcat02 tomcat</span><br><span class="line">11c83adc5d6b0e6c1285a047f1ac815fdd4fd52f24a86455cc25a50211d78bf2</span><br><span class="line">[root@baohua ~]# docker exec -it tomcat03 ping tomcat02</span><br><span class="line">PING tomcat02 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.080 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=2 ttl=64 time=0.054 ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">反向可以ping通吗</span></span><br><span class="line">[root@baohua ~]# docker exec -it tomcat02 ping tomcat03</span><br><span class="line">ping: tomcat03: Name or service not known</span><br></pre></td></tr></table></figure>
<p>其实tomcat03就是在本地配置了tomcat02的配置！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 可以通过inspect来查看tomcat03，发现</span></span><br><span class="line">  &quot;Links&quot;: [</span><br><span class="line">                &quot;/tomcat02:/tomcat03/tomcat02&quot;</span><br><span class="line">            ],</span><br><span class="line">            </span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可通过hosts配置</span></span><br><span class="line">[root@baohua ~]# docker exec -it tomcat03 cat /etc/hosts</span><br><span class="line">127.0.0.1	localhost</span><br><span class="line">::1	localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0	ip6-localnet</span><br><span class="line">ff00::0	ip6-mcastprefix</span><br><span class="line">ff02::1	ip6-allnodes</span><br><span class="line">ff02::2	ip6-allrouters</span><br><span class="line">172.17.0.3	tomcat02 adc1a9fe5eb1</span><br><span class="line">172.17.0.4	11c83adc5d6b</span><br></pre></td></tr></table></figure>
<p> –link 就是在hosts配置中增加了一个172.17.0.3    tomcat02 adc1a9fe5eb1</p>
<blockquote>
<p>现在不推荐使用docker0</p>
<p>docker0问题：它不支持容器名连接访问！</p>
</blockquote>
<h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><p>查看所有的docker网路</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">657920809e64        bridge              bridge              local</span><br><span class="line">c5e0580fd4d4        host                host                local</span><br><span class="line">df9959eef401        none                null                local</span><br></pre></td></tr></table></figure>
<p><strong>网络模式</strong></p>
<ul>
<li>bridge：桥接  docker(默认)</li>
<li>none：不配置网络</li>
<li>host：和宿主机共享网络</li>
<li>container：容器网络联通！(局限很大)</li>
</ul>
<p><strong>测试</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接启动的容器默认加 --net bridge ，这个就是docker0</span></span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker0特点： 默认；域名不能访问，--link可以打通</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自定义网络</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --driver bridge 桥接模式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --subnet 192.168.0.0/16 子网	<span class="comment"># 192.168.0.2 - 192.168.255.255</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --gateway 192.168.0.1 网关</span></span><br><span class="line">[root@baohua ~]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">0051a2fa2c6543e1499461926e6477336043698856ebb5a5c05ac141f498ab25</span><br><span class="line">[root@baohua ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">657920809e64        bridge              bridge              local</span><br><span class="line">c5e0580fd4d4        host                host                local</span><br><span class="line">0051a2fa2c65        mynet               bridge              local</span><br><span class="line">df9959eef401        none                null                local</span><br></pre></td></tr></table></figure>
<p>自己的网络就创建好了</p>
<p><img src="/2020/11/19/Docker/DockerNet/image-20201128160509490.png" alt="image-20201128160509490"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua ~]# docker run -d -P --name tomcat-net-01 --net mynet tomcat</span><br><span class="line">769200544dc16a570edd1383cf81b7bdff2be6249073f436db29a6b462020b60</span><br><span class="line">[root@baohua ~]# docker run -d -P --name tomcat-net-02 --net mynet tomcat</span><br><span class="line">ecc9189ce0fb6cf2984a48c6e8a9eb4089a648df4c4a9452ee92dc35cb694a4d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以通过ip地址ping通</span></span><br><span class="line">[root@baohua ~]# docker exec -it tomcat-net-01 ping 192.168.0.3</span><br><span class="line">PING 192.168.0.3 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.075 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=2 ttl=64 time=0.058 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=3 ttl=64 time=0.071 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.0.3 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 1000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.058/0.068/0.075/0.007 ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可通过名字ping 通</span></span><br><span class="line">[root@baohua ~]# docker exec -it tomcat-net-01 ping tomcat-net-02</span><br><span class="line">PING tomcat-net-02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.038 ms</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.053 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat-net-02 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 999ms</span><br><span class="line">rtt min/avg/max/mdev = 0.038/0.045/0.053/0.010 ms</span><br></pre></td></tr></table></figure>
<p>自定义的网络docker都已经帮我们维护好了对应的关系，推荐这样使用。</p>
<p>好处：</p>
<p>redis - 不同的集群不同的网络，保证集群是安全和健康的。</p>
<h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><p><img src="/2020/11/19/Docker/DockerNet/image-20201128162105535.png" alt="image-20201128162105535"></p>
<p><img src="/2020/11/19/Docker/DockerNet/image-20201128162209246.png" alt="image-20201128162209246"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试打通 tomcat01 - mynet</span></span><br><span class="line">[root@baohua ~]# docker network connect mynet tomcat01</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连通之后就是将tomcat01放到了 mynet网络下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一个容器两个ip地址</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 阿里云服务 	公网ip，私网ip</span></span><br><span class="line">[root@baohua ~]# docker network inspect mynet</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/19/Docker/DockerNet/image-20201128162650714.png" alt="image-20201128162650714"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tomcat01 可以连通</span></span><br><span class="line">[root@baohua ~]# docker exec -it tomcat01 ping tomcat-net-01</span><br><span class="line">PING tomcat-net-01 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.065 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.054 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat-net-01 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1000ms</span><br><span class="line">rtt min/avg/max/mdev = 0.054/0.059/0.065/0.009 ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 02没有打通</span></span><br><span class="line">[root@baohua ~]# docker exec -it tomcat02 ping tomcat-net-01</span><br><span class="line">ping: tomcat-net-01: Name or service not known</span><br></pre></td></tr></table></figure>


<h2 id="实战Redis部署集群"><a href="#实战Redis部署集群" class="headerlink" title="实战Redis部署集群"></a>实战Redis部署集群</h2><ol>
<li>创建redis网络</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create redis --subnet 172.38.0.0/16</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/19/Docker/DockerNet/2020102714234234.png" alt="img"></p>
<ol start="2">
<li>创建集群</li>
</ol>
<ul>
<li>使用 shell 脚本创建 6 个 redis 容器，并配置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /data/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /data/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;/data/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379 </span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes </span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.18.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p> <strong>查看是否创建成功</strong></p>
<p><img src="/2020/11/19/Docker/DockerNet/20201027142840723.png" alt="img"></p>
<ol start="3">
<li>通过配置文件启动 redis 容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 6371:6379 -p 16371:16379 --name redis-1 \</span><br><span class="line">-v /data/redis/node-1/data:/data \</span><br><span class="line">-v /data/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.18.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>
<p><strong>同理，其余五个节点类似</strong></p>
<p>六个节点启动成功如下图</p>
<p><img src="/2020/11/19/Docker/DockerNet/2020102714434912.png" alt="img"></p>
<p>进入 redis-01</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it redis-1 /bin/sh</span><br><span class="line">/data # ls</span><br><span class="line">appendonly.aof  nodes.conf</span><br><span class="line">/data # redis-cli --cluster create 172.18.0.11:6379 172.18.0.12:6379 172.18.0.13:6379 172.18.0.14:6379 172.18.0.15:6379 172.18.0.16:6379 --cluster-replicas 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span></span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 172.18.0.15:6379 to 172.18.0.11:6379</span><br><span class="line">Adding replica 172.18.0.16:6379 to 172.18.0.12:6379</span><br><span class="line">Adding replica 172.18.0.14:6379 to 172.18.0.13:6379</span><br><span class="line">M: 3d12668a4061034de1ce96008a03b2c12487c0b0 172.18.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 3ada3b418581f12ae5ae3fba9dfbf6ff6b0572a8 172.18.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: b4ec70894415549f06c280a45b02c88405c3426c 172.18.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 2b9514f61f37ea9e26d01fa520c1ce17a578aa5b 172.18.0.14:6379</span><br><span class="line">   replicates b4ec70894415549f06c280a45b02c88405c3426c</span><br><span class="line">S: 5ddcae45a54ddc06969b322239882606f2aca042 172.18.0.15:6379</span><br><span class="line">   replicates 3d12668a4061034de1ce96008a03b2c12487c0b0</span><br><span class="line">S: 302a8edb642d38121bc3fbcf44ac83686e1f2405 172.18.0.16:6379</span><br><span class="line">   replicates 3ada3b418581f12ae5ae3fba9dfbf6ff6b0572a8</span><br><span class="line">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span></span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">....</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing Cluster Check (using node 172.18.0.11:6379)</span></span><br><span class="line">M: 3d12668a4061034de1ce96008a03b2c12487c0b0 172.18.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 3ada3b418581f12ae5ae3fba9dfbf6ff6b0572a8 172.18.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 302a8edb642d38121bc3fbcf44ac83686e1f2405 172.18.0.16:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 3ada3b418581f12ae5ae3fba9dfbf6ff6b0572a8</span><br><span class="line">S: 5ddcae45a54ddc06969b322239882606f2aca042 172.18.0.15:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 3d12668a4061034de1ce96008a03b2c12487c0b0</span><br><span class="line">M: b4ec70894415549f06c280a45b02c88405c3426c 172.18.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 2b9514f61f37ea9e26d01fa520c1ce17a578aa5b 172.18.0.14:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b4ec70894415549f06c280a45b02c88405c3426c</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check slots coverage...</span></span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<p>如上，集群创建成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">进入集群查看相关信息</span><br><span class="line">/data # redis-cli -c</span><br><span class="line">127.0.0.1:6379&gt; CLUSTER INFO</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:524</span><br><span class="line">cluster_stats_messages_pong_sent:507</span><br><span class="line">cluster_stats_messages_sent:1031</span><br><span class="line">cluster_stats_messages_ping_received:502</span><br><span class="line">cluster_stats_messages_pong_received:524</span><br><span class="line">cluster_stats_messages_meet_received:5</span><br><span class="line">cluster_stats_messages_received:1031</span><br><span class="line">127.0.0.1:6379&gt; CLUSTER NODES</span><br><span class="line">3ada3b418581f12ae5ae3fba9dfbf6ff6b0572a8 172.18.0.12:6379@16379 master - 0 1603776351398 2 connected 5461-10922</span><br><span class="line">302a8edb642d38121bc3fbcf44ac83686e1f2405 172.18.0.16:6379@16379 slave 3ada3b418581f12ae5ae3fba9dfbf6ff6b0572a8 0 1603776351000 6 connected</span><br><span class="line">5ddcae45a54ddc06969b322239882606f2aca042 172.18.0.15:6379@16379 slave 3d12668a4061034de1ce96008a03b2c12487c0b0 0 1603776351599 5 connected</span><br><span class="line">3d12668a4061034de1ce96008a03b2c12487c0b0 172.18.0.11:6379@16379 myself,master - 0 1603776350000 1 connected 0-5460</span><br><span class="line">b4ec70894415549f06c280a45b02c88405c3426c 172.18.0.13:6379@16379 master - 0 1603776350591 3 connected 10923-16383</span><br><span class="line">2b9514f61f37ea9e26d01fa520c1ce17a578aa5b 172.18.0.14:6379@16379 slave b4ec70894415549f06c280a45b02c88405c3426c 0 1603776351000 4 connected</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<ul>
<li>我们来设个值，再将存值的主机停掉，然后查看是否可以获取到key</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET a b</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [15495] located at 172.18.0.13:6379</span></span><br><span class="line">OK</span><br><span class="line">————————————————————————————————————————————————————————————————————————————</span><br><span class="line">[root@web conf]# docker stop redis-3</span><br><span class="line">redis-3</span><br><span class="line">—————————————————————————————————————————————————————————————————————————————</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停掉获取key的主机后，再次进入集群，重新获取key</span></span><br><span class="line">[root@web conf]# docker exec -it redis-1 /bin/sh</span><br><span class="line">/data # get a</span><br><span class="line">/bin/sh: get: not found</span><br><span class="line">/data # redis-cli -c</span><br><span class="line">127.0.0.1:6379&gt; get a</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [15495] located at 172.18.0.14:6379</span></span><br><span class="line">&quot;b&quot;</span><br></pre></td></tr></table></figure>
<p>如上发现主机宕机，从机会自动升级为主节点！</p>
<h2 id="SpringBoot-微服务打包Docker镜像"><a href="#SpringBoot-微服务打包Docker镜像" class="headerlink" title="SpringBoot 微服务打包Docker镜像"></a>SpringBoot 微服务打包Docker镜像</h2><p>1、构架spingboot项目</p>
<p>2、打包应用</p>
<p>3、编写Dokcerfile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">COPY demo-0.0.1-SNAPSHOT.jar /app.jar</span><br><span class="line"></span><br><span class="line">CMD [&quot;server.port = 8080&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure>
<p>4、构建镜像</p>
<p>5、发布运行！</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 环境配置</title>
    <url>/2021/01/22/Java/java-env/</url>
    <content><![CDATA[<h1 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h1><h2 id="Windows-配置"><a href="#Windows-配置" class="headerlink" title="Windows 配置"></a>Windows 配置</h2><blockquote>
<p>计算机—-&gt;右键属性—&gt;高级环境设置—&gt;环境变量</p>
</blockquote>
<ul>
<li>在==系统变量==中新建系统变量</li>
</ul>
<ol>
<li><p>变量名 JAVA_HOME</p>
</li>
<li><p>变量值 C:\Program Files\Java\jdk1.8.0_51 <code>变量值是JDK安装的目录</code></p>
</li>
</ol>
<ul>
<li>在==系统变量==中找到path</li>
</ul>
<p>path的组成结构是 xxx;xxx; 每个系统属性之间以;隔开</p>
<p>注意此处的符号都是英文符号</p>
<p>在path的最后面添加 <strong>;%JAVA_HOME%\bin</strong></p>
<p>win10 <strong>%JAVA_HOME%\bin</strong></p>
<ul>
<li>在系统变量中新建系统变量</li>
</ul>
<ol>
<li><p>变量名 CLASSPATH</p>
</li>
<li><p>变量值 .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</p>
</li>
</ol>
<p><strong>环境变量验证</strong></p>
<pre><code>打开cmd  方法win+R  输入cmd   或者点击开始运行 输入cmd
在命令行输入  echo %JAVA_HOME%
再输入java -version
也可以测试下javac 回车
java 回车</code></pre>
<h2 id="Linux-配置"><a href="#Linux-配置" class="headerlink" title="Linux 配置"></a>Linux 配置</h2><hr>
<p>待续。。。</p>
]]></content>
      <categories>
        <category>Java入门</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>四、Docker容器卷</title>
    <url>/2020/10/24/Docker/DockerVolume/</url>
    <content><![CDATA[<h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><p>数据？如果数据都在容器中，那么容器删除，数据就会丢失！==需求：数据持久化==</p>
<p>MySQL，容器删除了，删库跑路! ==需求：MySQL可以存储在本地！==</p>
<p>容器之间可以有一个数据共享的技术！ Docker容器中产生的数据，同步在本地！<br>这就是卷技术！目录的挂载，将我们容器内的目录挂载在Linux上！</p>
<p><img src="/2020/10/24/Docker/DockerVolume/vol-20201121123120552.png" alt="vol-20201121123120552"></p>
<p><strong>总结：容器的持久化和同步操作！容器间也可以数据共享！</strong></p>
<h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote>
<p>方式一： 直接使用命令来挂载 -v</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@baohua home]# docker run -it -v /home/volumTest:/home centos /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动后可以通过docker inspect 容器id</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/24/Docker/DockerVolume/vol-20201121122142500.png" alt="vol-20201121122142500"></p>
<blockquote>
<p>经测试，文件时进行同步的。</p>
</blockquote>
<blockquote>
<p>停止容器后，修改本地文件，容器内会自动同步！</p>
</blockquote>
<h2 id="实战：安装Mysql"><a href="#实战：安装Mysql" class="headerlink" title="实战：安装Mysql"></a>实战：安装Mysql</h2><p>思考: MySQL的数据持久化的问题！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取镜像</span></span><br><span class="line">[root@baohua home]# docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行容器，需要做数据挂载！ <span class="comment"># 安装启动Mysql，需要配置密码的!!!</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 官方</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">测试</span></span><br><span class="line">-d 后台运行</span><br><span class="line">-p 端口映射</span><br><span class="line">-v 卷挂载</span><br><span class="line">-e 环境配置</span><br><span class="line">--name 容器名字</span><br><span class="line">[root@baohua ~]# docker run -d -p 200:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动成功后，使用工具链接测试</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接至 200端口 --- 与 容器内的3306映射。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在本地测试创建一个数据库，查看一下映射的路径是否ok！</span></span><br></pre></td></tr></table></figure>
<p>假设将容器删除</p>
<p><img src="/2020/10/24/Docker/DockerVolume/vol-20201121142345405.png" alt="vol-20201121142345405"></p>
<p>发现，挂载在本地的数据卷依旧没有丢失，这就实现了容器数据持久化功能！</p>
<h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">[root@baohua home]# docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的 volume 的情况</span></span><br><span class="line">[root@baohua home]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               189f1f3f577e609d593ad7c56d80f6a3d267d7189570e09701762aa39997e4ad</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这种就是匿名挂载。 在 -v 只写了容器内的路径，没有写容器外的路径！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">[root@baohua home]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line">9b86f2e3ad4ef676930ca90b5fb973dadeb190deb9f0c1aa279d37a23d3e0f47</span><br><span class="line">[root@baohua home]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               189f1f3f577e609d593ad7c56d80f6a3d267d7189570e09701762aa39997e4ad</span><br><span class="line">local               84161df8b6b10bc022ab111009964bb03c6c30ec90939cad373046803f6e4e08</span><br><span class="line">local               95301b1df13ea11fcf560237fdaeed3b1d61ed3cf1fe949c68660b9b296eb800</span><br><span class="line">local               juming-nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 卷名：容器内路径</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看一下这个卷</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/24/Docker/DockerVolume/vol-20201121144201102.png" alt="vol-20201121144201102"></p>
<p>所有的docker容器内的卷，没有指定目录的情况下都是在<code>/var/lib/docker/volumes/</code></p>
<p>通过具名挂载可以方便的找到我们的卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果确定具名挂载还是匿名挂载</span></span><br><span class="line">-v 容器内路径				# 匿名挂载</span><br><span class="line">-v 卷名:容器内路径			   # 具名挂载</span><br><span class="line">-v /宿主机路径:容器内路径		 # 指定路径挂载</span><br></pre></td></tr></table></figure>
<p>拓展：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 容器内路径:ro   rw 改变读写权限</span></span><br><span class="line">ro	readonly # 只读</span><br><span class="line">rw	readwrite # 可读可写</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一旦设置了容器权限。容器对挂载出来的内容就有限定了</span></span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内无法操作!</span></span><br></pre></td></tr></table></figure>
<h2 id="初始Dockerfile"><a href="#初始Dockerfile" class="headerlink" title="初始Dockerfile"></a>初始Dockerfile</h2><p>Dockerfile 就是用来构建docker 镜像的构建文件！ 命令脚本！</p>
<p>通过这个脚本可以生产镜像，镜像是一层一层的，脚本一个个的命令，每一层都是一个命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个Dockerfile文件，名字可以随机，建议Dockerfile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件中内容	指定（大写） 参数</span></span><br><span class="line">[root@baohua docker-volume-test]# pwd</span><br><span class="line">/home/docker-volume-test</span><br><span class="line">[root@baohua docker-volume-test]# ls</span><br><span class="line">dockerfile1</span><br><span class="line">[root@baohua docker-volume-test]# cat dockerfile1 </span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line"></span><br><span class="line">CMD echo &quot;end---&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line">[root@baohua docker-volume-test]# </span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这里的每个镜像都是每一层</span></span><br><span class="line">-f file路径</span><br><span class="line">-t Name and optionally a tag in the &#x27;name:tag&#x27; 镜像的名字</span><br><span class="line">[root@baohua docker-volume-test]# docker build -f /home/docker-volume-test/dockerfile1 -t baohua/centos:1.0 .</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/24/Docker/DockerVolume/vol-20201121151714680.png" alt="vol"></p>
<p>启动自己的容器</p>
<p><img src="/2020/10/24/Docker/DockerVolume/vol-20201121152039094.png" alt="vol-20201121152039094"></p>
<p><img src="/2020/10/24/Docker/DockerVolume/vol-20201121152258989.png" alt="vol-20201121152258989"></p>
<p>查看卷挂载的路径</p>
<p><img src="/2020/10/24/Docker/DockerVolume/vol-20201121152525142.png" alt="vol-20201121152525142"></p>
<blockquote>
<p>经测试，可以同步文件出去</p>
</blockquote>
<h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>多个容器间同步数据！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动两个容器</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/24/Docker/DockerVolume/vol-20201121153228773.png" alt="vol-20201121153228773"></p>
<p><img src="/2020/10/24/Docker/DockerVolume/vol-20201121153708997.png" alt="vol"></p>
<p><code>docker01 的目录数据同步在docker02中 ,经过测试，删除docker01，docker02的数据不会删除</code></p>
<p>结论：</p>
<p>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。</p>
<p>但是一旦持久化到了本地，这个时候，本地的数据是不会删除的!</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>main函数详解</title>
    <url>/2021/01/22/Java/java-main/</url>
    <content><![CDATA[<ul>
<li>main方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>public</strong>：公共的。 权限是最大，在任何情况下都可以访问。</p>
<p>原因：为了保证让jvm在任何情况下都可以访问到main方法。</p>
<p><strong>static</strong> ：静态。 静态可以jvm调用main函数的时候更加方便。不需要通过对象调用。</p>
<p><strong>void</strong> ： 无返回值。 因为返回的数据是给jvm，而jvm使用这个数据是没有意义的。所以就不要了。</p>
<p><strong>main</strong>：函数名。 注意：main并不是关键字，只不过是jvm能识别的一个特殊的函数名而已。</p>
<p><strong>arguments</strong>： 担心某些程序在启动需要参数。</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基础</title>
    <url>/2021/01/23/Linux/linux-basic/</url>
    <content><![CDATA[<p><strong>linux 基本命令操作</strong></p>
<h1 id="一、基本命令"><a href="#一、基本命令" class="headerlink" title="一、基本命令"></a>一、基本命令</h1><p>cd 进入个人主目录</p>
<p>cd /home</p>
<p>cd ..</p>
<p>cd - 返回上次所在的目录</p>
<p>pwd 显示工作路径</p>
<p>ls 查看目录中的文件</p>
<p>ls -l 查看文件和目录的详情</p>
<p>ls -a 显示隐藏文件</p>
<p>man</p>
<p><strong>文件处理命令</strong></p>
<p><strong>1.创建</strong></p>
<p>mkdir test 创建’test’目录</p>
<p>mkdir test01 test02 同时创建两个目录</p>
<p>mkdir -p test/aaa 创建级联目录</p>
<p><strong>2.删除</strong></p>
<p>rmdir test 删除 ‘test’ 目录 rm -f file 删除文件 rm -rf dir1 删除其目录以及内容</p>
<p><strong>3.移动</strong></p>
<p>mv app test 将app目录移动至test目录下</p>
<p><strong>4.复制</strong></p>
<p>cp file1 file2 将file1文件复制至file2下</p>
<p>cp dir/* . 复制一个目录下所有文件至当前工作目录</p>
<p>cp -a dir dir2 复制一个目录</p>
<h1 id="二、用户和用户组管理"><a href="#二、用户和用户组管理" class="headerlink" title="二、用户和用户组管理"></a>二、用户和用户组管理</h1><p>groupadd group name 创建一个新用户组</p>
<p>groupdel group name 删除一个用户组</p>
<p>groupmod -n new_group_name old_group_name 重命名一个用户组</p>
<p>useradd -g groupname user1 创建一个新用户</p>
<p>userdel -r user1 删除一个用户</p>
<p>passwd 修改口令</p>
<p>passwd 修改一个用户的口令</p>
<p><strong>切换用户</strong></p>
<p>su - 是带运行环境的</p>
<p>su 不带运行环境， 切换用户</p>
<h1 id="三、VIM使用"><a href="#三、VIM使用" class="headerlink" title="三、VIM使用"></a>三、VIM使用</h1><p>vi编辑模式</p>
<p>1.输入vi命令直接进入编辑模式</p>
<p>2.输入 “i” 进行输入模式 ；输入 “:” 进入末行模式</p>
<p>3.输入 “wq” 写入并退出</p>
<p>4.输入 “q!” 强制退出</p>
<p>注:source ./test 更新</p>
<p>查看 cat test.txt</p>
<h1 id="四、帮助命令"><a href="#四、帮助命令" class="headerlink" title="四、帮助命令"></a>四、帮助命令</h1><p>type cd 系统给出的解释</p>
<p>is –help 查看命令所支持的参数说明</p>
<p>help ls 获得ls命令的帮助文档</p>
<p>man cd 查看某命令的正式文档</p>
<p>which cd 查看cd命令的所在位置</p>
<h1 id="五、权限管理命令"><a href="#五、权限管理命令" class="headerlink" title="五、权限管理命令"></a>五、权限管理命令</h1><p>所有者 文件所在组 其他组</p>
<p>文件权限</p>
<p>读(r)、写(w)、执行(x)</p>
<p>r=4 、 w=2、x=1 因此rwx = 7</p>
<p>改变权限的命令</p>
<p>chmod 755 abc 给abc赋予权限 rwxr-xr-x</p>
<p>chown xiaoming abc 改变abc的所有者为xiaoming</p>
<p>chgrp root abc 改变abc所属的组为root</p>
<p>usermod -g 组名 用户名 改变用户所在组</p>
<h1 id="六、解压"><a href="#六、解压" class="headerlink" title="六、解压"></a>六、解压</h1><h2 id="解压-zip"><a href="#解压-zip" class="headerlink" title="解压.zip"></a>解压.zip</h2><p>upzip filename.zip</p>
<h2 id="解压tar-gz"><a href="#解压tar-gz" class="headerlink" title="解压tar.gz"></a>解压tar.gz</h2><p>tar -zxvf filename.tar.gz</p>
<h1 id="七、关机操作"><a href="#七、关机操作" class="headerlink" title="七、关机操作"></a>七、关机操作</h1><h2 id="1-关闭系统"><a href="#1-关闭系统" class="headerlink" title="1.关闭系统"></a>1.关闭系统</h2><p>shutdown -h now</p>
<p>init 0</p>
<p>telinit 0</p>
<h2 id="2-按时间关闭"><a href="#2-按时间关闭" class="headerlink" title="2.按时间关闭"></a>2.按时间关闭</h2><p>shutdown -h hours:minutes &amp; 按预定时间关闭系统</p>
<p>shutdown -c 取消按预定时间关闭系统</p>
<h2 id="3-重启"><a href="#3-重启" class="headerlink" title="3.重启"></a>3.重启</h2><p>shutdown -r now</p>
<p>reboot</p>
<h2 id="4-注销"><a href="#4-注销" class="headerlink" title="4.注销"></a>4.注销</h2><p>logout</p>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2021/01/23/DB/MySQL/</url>
    <content><![CDATA[<h1 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h1><ul>
<li>什么是数据库<ul>
<li>数据库是长期储存在计算机内,有组织的,可共享的数据集合</li>
</ul>
</li>
<li>数据库的作用<ul>
<li>储存数据,数据的仓库,带有访问权限限制不同人可以有不同的操作</li>
</ul>
</li>
</ul>
<h2 id="常见数据库"><a href="#常见数据库" class="headerlink" title="常见数据库"></a>常见数据库</h2>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql:开源免费的适用于中小型企业的免费数据库</span><br><span class="line"></span><br><span class="line">mariadb:直接是mysql开源版本的一个分支</span><br><span class="line"></span><br><span class="line">Oracle:甲骨文公司 适用于大型电商网站</span><br><span class="line"></span><br><span class="line">db2:IBM公司, 银行系统大多采用</span><br><span class="line"></span><br><span class="line">sqlserver:Windows里面,政府网站asp.net</span><br></pre></td></tr></table></figure>
<blockquote>
<p>NOSQL非关系型数据:key:value<br>mongodb<br>redis</p>
</blockquote>
<h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库:"></a>关系型数据库:</h3><pre><code>主要是用于描述实体与实体之间关系
实实在在的关系,老师-学生,员工-部门
E-R关系图
    实体:方框
    属性:椭圆
    联系:菱形</code></pre>
<h3 id="MYSQL的SQL语句"><a href="#MYSQL的SQL语句" class="headerlink" title="MYSQL的SQL语句"></a>MYSQL的SQL语句</h3><pre><code>SQL:Structure Query Language(结构化查询语言)
DDL:数据定义语言:定义数据库,数据表它们的结构:create(创建) drop(删除) alter(修改)
DML:数据操纵语言:主要是用来操作数据:insert(插入) update(修改) delete(删除)
DCL:数据控制语言:定义访问权限,取消访问权限 grant
DQL:数据查询语言:selec(查询) from子句 where子句</code></pre>
<h1 id="数据库的CRUD的操作"><a href="#数据库的CRUD的操作" class="headerlink" title="数据库的CRUD的操作"></a>数据库的CRUD的操作</h1><ul>
<li>首先要登陆数据库服务器:mysql -uroot -proot</li>
</ul>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database 数据库的名字;</span><br><span class="line">create database day06;</span><br><span class="line"></span><br><span class="line">create database 数据库的名字 character set 字符集;</span><br><span class="line">create database day06_01 character set utf8;</span><br><span class="line"></span><br><span class="line">create database 数据库的名字 character set 字符集 collate 校对规则</span><br><span class="line">create database day06_2 character set utf8 collate utf8_bin</span><br></pre></td></tr></table></figure>
<h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--查看数据库定义的语句</span><br><span class="line">show create database 数据库名字;</span><br><span class="line">show create database </span><br><span class="line"></span><br><span class="line">--查看所有所有数据库</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure>
<h2 id="修改数据库的操作"><a href="#修改数据库的操作" class="headerlink" title="修改数据库的操作"></a>修改数据库的操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--修改数据的字符集</span><br><span class="line">alter database 数据库的名字 character set 字符集;</span><br><span class="line">alter database day06_01 character set gbk;</span><br></pre></td></tr></table></figure>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop database 数据库名字;</span><br><span class="line">drop database day06_1;</span><br></pre></td></tr></table></figure>
<h2 id="其他数据库操作"><a href="#其他数据库操作" class="headerlink" title="其他数据库操作"></a>其他数据库操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--切换数据库(选中数据库)</span><br><span class="line">use 数据库的名字;</span><br><span class="line">use day06;</span><br><span class="line"></span><br><span class="line">--查看一下当前正在使用的数据库</span><br><span class="line">select database();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="表的CRUD操作"><a href="#表的CRUD操作" class="headerlink" title="表的CRUD操作"></a>表的CRUD操作</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    列名 列的类型(长度)  列的约束,</span><br><span class="line">    列名2 列的类型(长度) 烈的约束</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">列的类型：</span><br><span class="line">Java            sql</span><br><span class="line">int             int</span><br><span class="line">char&#x2F;String     char&#x2F;varchar</span><br><span class="line">                char()：固定长度</span><br><span class="line">                varchar()：可变长度</span><br><span class="line">                长度代表字符个数</span><br><span class="line">double          double </span><br><span class="line">float           float</span><br><span class="line">boolean         boolean</span><br><span class="line">date            date:YYYY-MM-DD</span><br><span class="line">                time:hh:mm:ss</span><br><span class="line">                datetime:YYYY-MM-DD hh:mm:ss 默认值为null</span><br><span class="line">                timestamp:YYYY-MM-DD hh:mm:ss 默认值为当前时间</span><br><span class="line">                </span><br><span class="line">                text：主要是存放文本</span><br><span class="line">                blob：存放二进制</span><br><span class="line"></span><br><span class="line">列的约束：</span><br><span class="line">    主键约束    primary key</span><br><span class="line">    唯一约束    unique</span><br><span class="line">    非空约束    not null</span><br><span class="line">    </span><br><span class="line">创建表：</span><br><span class="line">create table student(</span><br><span class="line">    sid int primary key,</span><br><span class="line">    sname varchar(10),</span><br><span class="line">    sex int,</span><br><span class="line">    age int</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--查看所有表</span><br><span class="line">show tables;</span><br><span class="line">--查看表的创建过程</span><br><span class="line">show create table 表名;</span><br><span class="line">--查看表结构</span><br><span class="line">desc 表名;</span><br></pre></td></tr></table></figure>
<h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;添加列(add)</span><br><span class="line">alter table 表名 add 列名 列的类型 列的约束</span><br><span class="line">alter table student add chengji int not null;</span><br><span class="line">&gt;修改列(modify)</span><br><span class="line">alter table 表名 modify 列名 列的类型 列的约束</span><br><span class="line">alter table student modify sex varchar(2);</span><br><span class="line">&gt;修改列名(change)</span><br><span class="line">alter table 表名 change 旧列名 新列名 列的类型 列的约束</span><br><span class="line">alter table student change changji sorce int;</span><br><span class="line">&gt;删除列(drop)</span><br><span class="line">alter table 表名 drop 列名;</span><br><span class="line">alter table student drop score;</span><br><span class="line"></span><br><span class="line">&gt;修改表名(rename)</span><br><span class="line">rename table 旧表名 to 新表名</span><br><span class="line">rename table student to teacher;</span><br><span class="line">&gt;修改表的字符集</span><br><span class="line">alter table teacher charecter set gbk;</span><br></pre></td></tr></table></figure>
<h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop table 表名</span><br><span class="line">drop table teacher;</span><br></pre></td></tr></table></figure>
<h1 id="sql对表中数据的CRUD操作"><a href="#sql对表中数据的CRUD操作" class="headerlink" title="sql对表中数据的CRUD操作"></a>sql对表中数据的CRUD操作</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into 表名(列名1,列名2,列名3) values(值1,值2,值3);</span><br><span class="line">insert into student(sid,sname,sex,age) values(1,&#39;lisi&#39;,1,10);</span><br><span class="line"></span><br><span class="line">--简单写法：如果插入是全列名的数据，表名后面的列名可以省略</span><br><span class="line">intsert into student values(值1,值2,值3,值4);</span><br><span class="line">insert into student values(2,&#39;zhangsan&#39;,0,19);</span><br><span class="line"></span><br><span class="line">--注：插入部分列，列名不可省略</span><br><span class="line">insert into 表名(列名1,列名2) values(值1,值2);</span><br><span class="line">insert into student(sid,sname) values(3,&#39;wangwu&#39;);</span><br><span class="line"></span><br><span class="line">--批量插入</span><br><span class="line">insert into student values</span><br><span class="line">(4,&#39;zhangsan&#39;,1,23),</span><br><span class="line">(5,&#39;zhangsan&#39;,1,23),</span><br><span class="line">(6,&#39;zhangsan&#39;,1,23),</span><br><span class="line">(7,&#39;zhangsan&#39;,1,23);</span><br><span class="line"></span><br><span class="line">--查看表中数据</span><br><span class="line">select * from student;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>命令行下插入中文问题</p>
</blockquote>
<ul>
<li>临时解决方案：set names gbk;相当于是高速mysql服务器软件，我们当前在命令行下输入的内容是GBK编码.当命令窗口关闭后，它就在输入中文就会存在问题。</li>
<li>永久解决方法：修改my.in配置文件<ul>
<li>暂停mysql的服务</li>
<li>在mysql安装路径中找到my.in配置文件</li>
<li>将编码改成gbk</li>
<li>保存文件退出</li>
<li>启动mysql</li>
</ul>
</li>
</ul>
<h2 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from 表名 [where 条件]</span><br><span class="line">delete from student where sid&#x3D;4;</span><br><span class="line">delete from student;如果没有指定条件会将表中数据一条一条全部删除</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;delete删除数据和truncate删除数据的qubie&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">delete：DML 一条一条删除表中的数据</span><br><span class="line">truncate：DDL 先删除表再重建表</span><br><span class="line">关于哪条执行效率高：具体要看表中的数据量</span><br><span class="line">    如果数据比较少，delete比较高效</span><br><span class="line">    如果数据比较多，truncate比较高效</span><br></pre></td></tr></table></figure>
<h2 id="更新表记录"><a href="#更新表记录" class="headerlink" title="更新表记录"></a>更新表记录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update 表名 set 列名&#x3D;值，列名2&#x3D;值 [where 条件]</span><br><span class="line">将sid为5的名字改成李四</span><br><span class="line">update student set sname&#x3D;&#39;李四&#39; where sid&#x3D;5;</span><br><span class="line"></span><br><span class="line">update student set sname&#x3D;&#39;李四&#39;,sex&#x3D;0 where sid&#x3D;6;</span><br></pre></td></tr></table></figure>
<h2 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select [distinct] [*] [列名,列名2] from 表名 [where 条件]</span><br><span class="line"></span><br><span class="line">--商品分类</span><br><span class="line">1.分类的ID </span><br><span class="line">2.分类名称</span><br><span class="line">3.分类描述</span><br><span class="line"></span><br><span class="line">create table category(</span><br><span class="line">    cid int primary key auto_increment,</span><br><span class="line">    cname varchar(10),</span><br><span class="line">    cdesc varchar(20),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into category values</span><br><span class="line">(null,&#39;手机&#39;,&#39;电子产品&#39;),</span><br><span class="line">(null,&#39;电脑&#39;,&#39;科技产品&#39;),</span><br><span class="line">(null,&#39;鞋靴箱包&#39;,&#39;日用品&#39;),</span><br><span class="line">(null,&#39;瓜子花生&#39;,&#39;吃喝&#39;),</span><br><span class="line">(null,&#39;汉堡鸡腿&#39;,&#39;KFC&#39;);</span><br><span class="line"></span><br><span class="line">select * from category;</span><br><span class="line">select cid,cname from category;</span><br><span class="line"></span><br><span class="line">--所有商品</span><br><span class="line">create table product(</span><br><span class="line">    pid int primary key auto_increment,</span><br><span class="line">    pname varchar(10),</span><br><span class="line">    price double,</span><br><span class="line">    pdata timestamp,</span><br><span class="line">    cno int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into product values(null,&#39;小米&#39;,1998,null,1);</span><br><span class="line">insert into product values(null,&#39;锤子&#39;,2958,null,1);</span><br><span class="line">insert into product values(null,&#39;阿迪达斯&#39;,222,null,2);</span><br><span class="line">insert into product values(null,&#39;粗粮王&#39;,25,null,3);</span><br><span class="line">insert into product values(null,&#39;劲酒&#39;,99,null,3);</span><br><span class="line">insert into product values(null,&#39;小熊饼干&#39;,7,null,4);</span><br><span class="line">insert into product values(null,&#39;旺旺小饼&#39;,11,null,5);</span><br><span class="line">insert into product values(null,&#39;哇哈哈&#39;,21,null,6);</span><br><span class="line">insert into product values(null,&#39;卫龙辣条&#39;,13,null,6);</span><br><span class="line">insert into product values(null,&#39;杯子&#39;,87,null,7);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--简单查询:</span><br><span class="line">--查询所有的商品</span><br><span class="line">    select * from product;</span><br><span class="line">--查询商品名称和商品价格</span><br><span class="line">    select prince,pname from product;</span><br><span class="line">    </span><br><span class="line">--别名查询  as的关键字, as 关键字可以省略</span><br><span class="line">    --表别名 select p.name,p.price from product p;(主要用于多表查询)</span><br><span class="line">    select p.name,p.price from product as p;</span><br><span class="line">    </span><br><span class="line">    --列别名 select pname as 商品名称,prince as 商品价格 from product;</span><br><span class="line">    select pname as 商品名字,price as 商品价格 from product;</span><br><span class="line">    省略as关键字</span><br><span class="line">    select pname 商品名字,price 商品价格 from product;</span><br><span class="line">    </span><br><span class="line">--去掉重复的值</span><br><span class="line">    --查询商品所有的价格;</span><br><span class="line">    select price from product;</span><br><span class="line">    select distinct price from product;</span><br><span class="line">    </span><br><span class="line">--select运算查询</span><br><span class="line">    select *,price*1.5 from product;</span><br><span class="line">    select *,price*0.8 as 折后价 from product; </span><br><span class="line">--条件查询 [where关键字]</span><br><span class="line">    指定条件,确定要操作的记录</span><br><span class="line">--where后的条件写法</span><br><span class="line">    --关系运算符 : &gt; &gt;&#x3D; &lt; &lt;&#x3D; &#x3D; !&#x3D; &lt;&gt;</span><br><span class="line">        &lt;&gt; : 不等于 : 标准SQL语法</span><br><span class="line">        !&#x3D; : 不等于 : 非标准语法</span><br><span class="line">    --查询商品价格不等于222的其他商品</span><br><span class="line">    select * from product where price &lt;&gt; 222;</span><br><span class="line">    select * from product where price !&#x3D; 222;</span><br><span class="line">    --查询商品价格在30到100之间</span><br><span class="line">    select * from product where price &gt;30 and price&lt;100;</span><br><span class="line">    select * from product where price between 30 and 100;</span><br><span class="line">    </span><br><span class="line">    --逻辑运算符:and or not</span><br><span class="line">    --查询商品价格小于100 或者商品价格大于900</span><br><span class="line">    select * from product where price&lt;100 or price &gt;900; </span><br><span class="line"></span><br><span class="line">--查询商品价格大于60的所有商品信息</span><br><span class="line">    select * from product where price &gt; 60;</span><br><span class="line">    </span><br><span class="line">--like : 模糊查询</span><br><span class="line">    _ :代表一个字符</span><br><span class="line">    % :代表多个字符</span><br><span class="line">    --查询出名字中带有小的所有商品 &#39;%小%&#39;</span><br><span class="line">    select * from product where pname like &#39;%小%&#39;;</span><br><span class="line">    --查询第二个字带子的所有商品</span><br><span class="line">    select * from product where pname    like &#39;_子&#39;;</span><br><span class="line"></span><br><span class="line">    --in 在某个范围中获得值</span><br><span class="line">        --查询出商品分类ID在1,4,5里面的所有商品</span><br><span class="line">        select * from product where cno in (1,3,4);</span><br><span class="line"></span><br><span class="line">--排序查询:order by 关键字</span><br><span class="line">    asc : ascend 升序 (默认的排序方式)</span><br><span class="line">    desc : descent 降序</span><br><span class="line">    </span><br><span class="line">    --0.查询所有商品,按照价格进行排序</span><br><span class="line">    select * from product order by price;</span><br><span class="line">    --1.查询所有商品,按照价格进行降序</span><br><span class="line">     select * from product order by price desc;</span><br><span class="line">    --2.查询名称有小的商品,按价格升序</span><br><span class="line">    select * from product where pname like &#39;%小%&#39;;</span><br><span class="line">    select * from product where pname like &#39;%小%&#39; order by price asc;</span><br><span class="line"></span><br><span class="line">--聚合函数</span><br><span class="line">    sum() : 求和</span><br><span class="line">    avg() : 求平均值</span><br><span class="line">    count() : 统计数量</span><br><span class="line">    max() : 最大值</span><br><span class="line">    min() : 最小值</span><br><span class="line">    --1.获得所有商品价格的总和</span><br><span class="line">    select sum(price) from product;</span><br><span class="line">    --2.获得所有商品的平均价格</span><br><span class="line">    select avg(price) from product;</span><br><span class="line">    --3.获得所有商品的个数</span><br><span class="line">    select count(price) from product;</span><br><span class="line">    </span><br><span class="line">**where条件后面不能接聚合函数** </span><br><span class="line"></span><br><span class="line">--分组:group by </span><br><span class="line">    --1.根据cno字段分组,分组后统计商品的个数</span><br><span class="line">    select cno,count(*) from product group by cno;</span><br><span class="line">    --2.根据cno字段分组,分组后统计每组商品的平均价格并且商品平均价格&gt;60;</span><br><span class="line">    select cno,avg(price) from product group by cno having avg(price) &gt; 60;</span><br><span class="line">   </span><br><span class="line">    --having 关键字 可以接聚合函数的 出现在分组之后</span><br><span class="line">    --where 关键字 不可以接聚合函数  出现在分组之前</span><br><span class="line">    </span><br><span class="line">--编写顺序</span><br><span class="line"> S..F..W..G..H..O</span><br><span class="line"> select..from..where..group by..having..order by</span><br><span class="line"></span><br><span class="line">--执行顺序</span><br><span class="line"> F..W..G..H..S..O</span><br><span class="line">from..where..group by..having..select..order by</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL基础</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Test与Junit</title>
    <url>/2021/01/24/SSM/spring-junit/</url>
    <content><![CDATA[<h2 id="Spring-Test-与-Junit"><a href="#Spring-Test-与-Junit" class="headerlink" title="Spring Test 与 Junit"></a>Spring Test 与 Junit</h2><p>Spring Test整合使用Junit需要导入以下包：</p>
<blockquote>
<p>spring-test：spring测试模块</p>
<p>junit-4.12.jar：Junit测试包</p>
<p>hamcrest-core-1.3.jar：Junit依赖该包</p>
</blockquote>
<h3 id="1-独立使用junit"><a href="#1-独立使用junit" class="headerlink" title="1 独立使用junit"></a>1 独立使用junit</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.spring.dao.impl.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/24 10:30</span></span><br><span class="line"><span class="comment"> *  直接使用Junit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*初始化测试环境*/</span></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// userDao</span></span><br><span class="line">         userDao = applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>, UserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*测试用例*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.addUser(<span class="string">&quot;test&quot;</span>,<span class="number">13</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="2-Spring-test-集成-junit"><a href="#2-Spring-test-集成-junit" class="headerlink" title="2 Spring test 集成 junit"></a>2 Spring test 集成 junit</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.spring.dao.impl.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/24 10:42</span></span><br><span class="line"><span class="comment"> * Spring-test 整合 junit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//RunWith(SpringJUnit4ClassRunner.class) or @RunWith(SpringRunner.class).</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="comment">// Java 配置方式测试上下文： @ContextConfiguration(classes:MvcConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTestJunit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.addUser(<span class="string">&quot;testJunit&quot;</span>,<span class="number">19</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Spring整合Junit使用方法</p>
<ol>
<li>继续使用 Junit4 测试框架，包括其 @Test 注释标签和相关的类和方法的定义，这些都不用变 </li>
<li>通过 @RunWith(SpringJUnit4ClassRunner.class) 来启动 Spring 对测试类的支持 </li>
<li>通过 @ContextConfiguration 注释标签来指定 Spring 配置文件或者配置类的位置 </li>
<li>通过 @Transactional 来启用自动的事务管理,测试数据自动回滚 </li>
<li>可以使用 @Autowired 自动织入 Spring 的 bean 用来测试</li>
</ol>
<p>不再需要： </p>
<ol>
<li>手工加载 Spring 的配置文件</li>
<li>手工清理数据库的每次变更 </li>
<li>手工获取 application context 然后获取 bean 实例</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-mybaits</title>
    <url>/2021/01/24/SSM/spring-mybaits/</url>
    <content><![CDATA[<h2 id="与其他框架集成"><a href="#与其他框架集成" class="headerlink" title="与其他框架集成"></a>与其他框架集成</h2><h3 id="7-1-集成-Mybatis"><a href="#7-1-集成-Mybatis" class="headerlink" title="7.1 集成 Mybatis"></a>7.1 集成 Mybatis</h3><p>Spring与MyBatis的整合需要借助于MyBatis的一个子项目MyBatis-Spring。通过MyBatis-Spring可以 将 MyBatis 无缝地整合到 Spring 中，包括事务管理、Mapper生成、异常类型转化等，甚至是模板和 值支持工具类也有提供：SqlSessionTemplate、SqlSessionDaoSupport</p>
<blockquote>
<p>官网文档： <a href="http://www.mybatis.org/spring/zh/">http://www.mybatis.org/spring/zh/</a> </p>
<p>源码： <a href="https://github.com/mybatis/spring">https://github.com/mybatis/spring</a> </p>
<p>ZIP发行包：2.0后只有源码包，没有zip文件，可在mvn仓库下载jar文件:  <a href="https://github.com/mybatis/spring/releases">https://github.com/mybatis/spring/releases</a> </p>
<p>与Spring的版本配套关系： <a href="http://www.mybatis.org/spring/zh/index.html">http://www.mybatis.org/spring/zh/index.html</a></p>
</blockquote>
<h4 id="7-1-1-基于XML的配置"><a href="#7-1-1-基于XML的配置" class="headerlink" title="7.1.1 基于XML的配置"></a>7.1.1 基于XML的配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置驱动，url，username，password--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SqlSessionFactory 需要 DataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/demo/spring/user/mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath*:mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseIdProvider&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;databaseIdProvider&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MapperScannerConfigurer--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.demo&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用annotation注解方式配置事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--多数据库支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;databaseIdProvider&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.mapping.VendorDatabaseIdProvider&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;SQL Server&quot;</span>&gt;</span>sqlserver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;DB2&quot;</span>&gt;</span>db2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;Oracle&quot;</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;MySQL&quot;</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><strong>SqlSessionFactory</strong>：SqlSessionFactoryBean 实现了 Spring 的 FactoryBean 接口， Spring会调用他的getObject方法创建，方法中创建了SqlSessionFactory。 SqlSessionFactoryBean 唯一需要的属性是dataSource，其他属性解析： </li>
<li>configLocation：这个配置文件不需要是一个完整的 MyBatis 配置。确切地说,任意环境,数据源 和 MyBatis 的事务管理器都会被忽略 </li>
<li>mapperLocations：Ant样式的path，从类路径下加载包和它的子包中所有的 MyBatis 映射文件。 </li>
<li>databaseIdProvider：多数据库支持的引用，可以在MyBatis 配置文件中配置，也可以在 Spring中配置，然后通过这个属性传入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多数据库支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;databaseIdProvider&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.mapping.VendorDatabaseIdProvider&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;SQL Server&quot;</span>&gt;</span>sqlserver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;DB2&quot;</span>&gt;</span>db2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;Oracle&quot;</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;MySQL&quot;</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>MapperScannerConfigurer</strong>：扫描类路径，生成Mapper接口的代理，相关属性：  </li>
<li>basePackage：多个ant分格的类路径，用逗号或者分号分割 </li>
<li>sqlSessionFactoryBeanName：指定sqlSessionFactory的name，可以不设置 </li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>生成的映射器在Spring上下文中的ID为，首字母小写的接口名，如：UserDao接口对应bean的id 为userDao，但是如果是IUserDao，则bean的id为IUserDao</p>
<ul>
<li><p>其他注册映射器的方式:</p>
<ul>
<li>MapperFactoryBean </li>
<li>使用 mybatis:scan/ 元素 </li>
<li>使用 @MapperScan 注解</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperInterface&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">&quot;com.demo.spring.sample.step05.mybatis.dao.IUserDAO&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mybatis:scan</span> <span class="attr">base-package</span>=<span class="string">&quot;org.mybatis.spring.sample.mapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@MapperScan(&quot;org.mybatis.spring.sample.mapper&quot;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="7-1-2-基于Java的配置"><a href="#7-1-2-基于Java的配置" class="headerlink" title="7.1.2 基于Java的配置"></a>7.1.2 基于Java的配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/24 14:10</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driverClassName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.ur&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        <span class="comment">// 设置数据源</span></span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource());</span><br><span class="line">        <span class="comment">// 设置mybatis的映射文件</span></span><br><span class="line">        PathMatchingResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(resolver.getResources(<span class="string">&quot;classpath*:com/demo/spring/sample/step09/mybatis/**/*Mapper.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MapperScannerConfigurer <span class="title">mapperScannerConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MapperScannerConfigurer mapperScannerConfigurer = <span class="keyword">new</span> MapperScannerConfigurer();</span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">&quot;com.demo.spring.sample.step09.mybatis.**.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于java的配置中，事务管理器的默认名称为txManager</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> PlatformTransactionManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">txManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Web</title>
    <url>/2021/01/24/SSM/spring-web/</url>
    <content><![CDATA[<h2 id="Spring-Web"><a href="#Spring-Web" class="headerlink" title="Spring-Web"></a>Spring-Web</h2><h3 id="1-工程依赖"><a href="#1-工程依赖" class="headerlink" title="1 工程依赖"></a>1 工程依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring-web: Spring-web 必选--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖性导入：spring-beans、spring-core--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--************* Java EE API *************--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Servlet API --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- JSP API--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--JSTL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>版本对应关系：</strong></p>
<table>
<thead>
<tr>
<th align="left">Servlet Spec</th>
<th align="left">JSP Spec</th>
<th align="left">JSTL(jsp标准标签库)</th>
<th align="left">EL Spec</th>
<th align="left">WebSocket Spec</th>
<th align="left">jdk</th>
<th align="left">Apache Tomcat Version</th>
<th align="left">JavaEE Version</th>
</tr>
</thead>
<tbody><tr>
<td align="left">4.0</td>
<td align="left">2.3</td>
<td align="left">1.2</td>
<td align="left">3.0</td>
<td align="left">1.1</td>
<td align="left">JDK8+</td>
<td align="left">tomcat9.x+以上的配置</td>
<td align="left">Java EE 8</td>
</tr>
<tr>
<td align="left">3.1</td>
<td align="left">2.3</td>
<td align="left">1.2</td>
<td align="left">3.0</td>
<td align="left">1.1</td>
<td align="left">JDK7+</td>
<td align="left">tomcat8.x+以上的配置</td>
<td align="left">Java EE 7</td>
</tr>
<tr>
<td align="left">3.0</td>
<td align="left">2.2</td>
<td align="left">1.2</td>
<td align="left">2.2</td>
<td align="left">1.1</td>
<td align="left">JDK6+(使用websocket需要JDK7+)</td>
<td align="left">tomcat7.x</td>
<td align="left">Java EE 6</td>
</tr>
<tr>
<td align="left">2.5</td>
<td align="left">2.1</td>
<td align="left">1.2</td>
<td align="left">2.1</td>
<td align="left">无</td>
<td align="left">jdk5+</td>
<td align="left">tomcat6</td>
<td align="left">Java EE 5</td>
</tr>
</tbody></table>
<h3 id="2-初始化Spring容器"><a href="#2-初始化Spring容器" class="headerlink" title="2 初始化Spring容器"></a>2 初始化Spring容器</h3><p>Spring 既可以在JavaSE中使用，也可以在JavaEE环境中使用，在Web环境下可以借助Spring-Web提供的监听器初始化Spring容器。如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    &lt;param-value&gt;/WEB-INF/applicaiton*.xml&lt;/param-value&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-在Servlet中获取容器"><a href="#3-在Servlet中获取容器" class="headerlink" title="3 在Servlet中获取容器"></a>3 在Servlet中获取容器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.istack.internal.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.WebApplicationContextUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/24 11:25</span></span><br><span class="line"><span class="comment"> * Spring-web 的 servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/userServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= Logger.getLogger(UserServlet.class);</span><br><span class="line">   <span class="keyword">private</span> WebApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化方法 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">       applicationContext = WebApplicationContextUtils.getWebApplicationContext(config.getServletContext());</span><br><span class="line">       applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;----------- do init ------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;----------- do Get ------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;----------- do doPost ------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;----------- destroy ------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2021/01/23/Web/CSS/</url>
    <content><![CDATA[<h1 id="使用css完成首页的优化"><a href="#使用css完成首页的优化" class="headerlink" title="使用css完成首页的优化"></a>使用css完成首页的优化</h1><p>表格布局的缺陷：</p>
<p>1.嵌套层级太多,一旦出现嵌套顺序错乱,整个页面达不到预期效果</p>
<p>2.采用表格布局,页面不够灵活,动其中某一块,整个表格布局的结构全都要变</p>
<h2 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h2><p>HTML的块标签：</p>
<pre><code>div标签：默认占一行,自动换行
span标签：内容显示在同一行</code></pre>
<p>CSS的概述：<br>    Caccading Style Sheets : 层叠样式表</p>
<p>主要作用：</p>
<pre><code>用来美化HTML页面的

HTML决定网页的骨架  css美化</code></pre>
<p>CSS的简单语法:</p>
<p>在一个style标签中,去编写CSS内容,最好将style标签写在这个head标签中</p>
<html>

<pre><code>&lt;style&gt;
  选择器&#123;
    属性名称:属性的值;
    属性名称2: 属性的值2;
  &#125;
&lt;/style&gt;</code></pre>
</html>

<p>CSS选择器: 帮助我们找到我们要修饰的标签或者元素</p>
<pre><code>类加载器        class   以.开头
ID加载器        id      以 # 开头     id必须唯一
属性加载器      以属性名开头 </code></pre>
<p>CSS的引入方式:</p>
<p>外部样式: 通过link标签引入一个外部的css文件</p>
<p>内部样式: 直接在style标签内编写CSS代码</p>
<p>行内样式: 直接在标签中添加一个style属性, 编写CSS样式</p>
<p>CSS浮动：</p>
<pre><code>float : right,left  不再占有正常文档流中的空间 , 流式布局
clear : both right left</code></pre>
<h1 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h1><p>CSS的优先级<br>按照选择器搜索精准度来编写：   行内样式&gt;ID选择器&gt;类选择器&gt;元素选择器</p>
<p>就近原则，哪个近选哪个</p>
<ul>
<li><p>CSS的其他选择器</p>
<ul>
<li>选择器分组：选择器1,选择器2{属性的名称,属性的值}</li>
<li>属性选择器：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[title]</span><br><span class="line">a[title&#x3D;&#39;aaa&#39;]</span><br><span class="line">a[title][href]</span><br><span class="line">a[title&#x3D;&#39;aaa&#39;][href]</span><br></pre></td></tr></table></figure></li>
<li>后代选择器：爷爷选择器 孙子选择器     找出所有子孙后代    </li>
<li>子元素选择器：爷爷选择器 &gt; 儿子选择器</li>
<li>伪类选择器：通常用作a标签上   </li>
</ul>
</li>
</ul>
<h1 id="使用DIV-CSS完成注册页面的优化"><a href="#使用DIV-CSS完成注册页面的优化" class="headerlink" title="使用DIV+CSS完成注册页面的优化"></a>使用DIV+CSS完成注册页面的优化</h1><h2 id="技术分析-1"><a href="#技术分析-1" class="headerlink" title="技术分析"></a>技术分析</h2><p>CSS的盒子模型: 万物皆盒子</p>
<p>内边距:  </p>
<p>padding-top:</p>
<p>padding-right:</p>
<p>padding-bottom:</p>
<p>padding-left:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">padding:10px;  上下左右都是10px</span><br><span class="line">padding:10px 20px;  上下是10px 左右是20px</span><br><span class="line">padding: 10px 20px 30px;  上 10px 右20px  下30px  左20px</span><br><span class="line">padding: 10px 20px 30px 40px;  上右下左, 顺时针的方向</span><br></pre></td></tr></table></figure>
<p>外边距:</p>
<p>margin-top:</p>
<p>margin-right:</p>
<p>margin-bottom:</p>
<p>margin-left: </p>
<p>CSS绝对定位:</p>
<pre><code>position: absolute
    top: 控制距离顶部的位置
    left: 控制距离左边的位置</code></pre>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2021/01/23/Web/HTML/</url>
    <content><![CDATA[<h1 id="1-网站信息页面"><a href="#1-网站信息页面" class="headerlink" title="1.网站信息页面"></a>1.网站信息页面</h1><h2 id="HTML概述："><a href="#HTML概述：" class="headerlink" title="HTML概述："></a>HTML概述：</h2><p>HTML：Hyper Text Markup Language 超文本标记语言</p>
<p>超文本：比普通文本功能更强大，可以添加各种样式</p>
<p>标记语言：通过一组标签，对内容进行描述，&lt;关键字&gt;，由浏览器解释执行</p>
<h2 id="HTML的主要作用：设计网页的基础-HTML5"><a href="#HTML的主要作用：设计网页的基础-HTML5" class="headerlink" title="HTML的主要作用：设计网页的基础  HTML5"></a>HTML的主要作用：设计网页的基础  HTML5</h2><h2 id="HTML语法规范"><a href="#HTML语法规范" class="headerlink" title="HTML语法规范"></a>HTML语法规范</h2><pre><code>&lt;!--
    1. 上面是一个文档声明 
    2. 根标签 html
    3. html文件主要包含两部分. 头部分和体部分
        头部分 : 主要是用来放置一些页面信息
        体部分 : 主要来放置我们的HTML页面内容
    4. 通过标签来对内容进行描述,标签通常都是由开始标签和结束标签组成  
    5. 标签不区分大小写, 官方建议使用小写
--&gt;</code></pre>
<h3 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h3><pre><code>b:加粗
i:斜体
strong:加粗，带语义标签
em:斜体，带语义</code></pre>
<h1 id="2-网站图片信息"><a href="#2-网站图片信息" class="headerlink" title="2.网站图片信息"></a>2.网站图片信息</h1><h2 id="2-1技术分析"><a href="#2-1技术分析" class="headerlink" title="2.1技术分析"></a>2.1技术分析</h2><p>img标签：</p>
<p>常用的属性：</p>
<pre><code>width:宽度
height:高度
src:指定文件路径
alt:图片加载失败显示的提示内容</code></pre>
<h2 id="2-2路径问题"><a href="#2-2路径问题" class="headerlink" title="2.2路径问题"></a>2.2路径问题</h2><pre><code>- 相对路径
    ./        代表的是当前路径
    ../     代表的上一级路径
    ../../    上上一级路径</code></pre>
<h1 id="3-网站友情链接页面"><a href="#3-网站友情链接页面" class="headerlink" title="3.网站友情链接页面"></a>3.网站友情链接页面</h1><h2 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h2><ul>
<li>百度</li>
<li>搜狐</li>
<li>新浪微博</li>
</ul>
<h2 id="3-2-技术分析"><a href="#3-2-技术分析" class="headerlink" title="3.2 技术分析"></a>3.2 技术分析</h2><p>列表标签：</p>
<pre><code>无序列表：ul
    type:disc  suqare   circle
有序列表：ol
    type:1,a,A,i,I</code></pre>
<h2 id="3-3扩展内容"><a href="#3-3扩展内容" class="headerlink" title="3.3扩展内容"></a>3.3扩展内容</h2><pre><code>点击链接，跳转

a 超链接标签

    常用属性：
    href：指定要跳出去的地址
            如果是网络地址，需要加上http协议
            如果是本网站的html文件，可以直接写文件路径
    target：打开方式
            _blank      新窗口打开
            _self       本窗口打开</code></pre>
<h1 id="4-网站首页"><a href="#4-网站首页" class="headerlink" title="4.网站首页"></a>4.网站首页</h1><h2 id="表格标签table"><a href="#表格标签table" class="headerlink" title="表格标签table"></a>表格标签table</h2><pre><code>table标签：
    bgcolor：背景色     
    width：    宽度
    height：   高度 
    border：   边框
tr 标签
td 标签</code></pre>
<h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><pre><code>colspan：跨列           rowspan：跨行</code></pre>
<h2 id="表格的嵌套"><a href="#表格的嵌套" class="headerlink" title="表格的嵌套"></a>表格的嵌套</h2><pre><code>在td中可以嵌套一个表格</code></pre>
<h1 id="5-网站注册案例"><a href="#5-网站注册案例" class="headerlink" title="5.网站注册案例"></a>5.网站注册案例</h1><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><pre><code>form 表单标签
    action:直接提交的地址
    method:
        get方式：默认提交方式，会将参数拼接在链接后面，限制大小，4k
        post方式： 会将参数封装在请求体中，没有这样的限制
input:
    type:指定输入项的类型
        text:文本
        password:密码框
        button:普通按钮
        submit:提交按钮
        reset:重置按钮
        radio:单选按钮
        checkbox:复选按钮
        file：上传文件
        hidden：隐藏域      主要用于存放页面上的id信息

        date：日期类型
        tel：手机号
        number：只允许数字
    placeholder:指定默认的提示信息
    name:在表单提交的时候，作为参数的名称
    id：给输入项起名字，便于后期查找和操作
textarea:文本域，可以输入一段文字
    cols：指定宽度
    rows：指定高度
select：下拉列表
    option：选择项</code></pre>
<h1 id="6-网站后台页面"><a href="#6-网站后台页面" class="headerlink" title="6.网站后台页面"></a>6.网站后台页面</h1><h2 id="框架标签"><a href="#框架标签" class="headerlink" title="框架标签"></a>框架标签</h2><p>frameset</p>
<blockquote>
<pre><code>注意：使用了frameset必须将body去掉</code></pre>
<p>在框架中点击跳转</p>
</blockquote>
<p>frame</p>
<pre><code>常用属性：
    src:引入html文件路劲
    name：指定框架的名称</code></pre>
<h1 id="HBuilder常用的快捷键"><a href="#HBuilder常用的快捷键" class="headerlink" title="HBuilder常用的快捷键"></a>HBuilder常用的快捷键</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Ctrl + D 					删除光标当前所在的行</span><br><span class="line">Ctrl + Shift + R 			复制当前行到下一行</span><br><span class="line">Ctrl + Enter 				将光标移动到下一行</span><br><span class="line">Ctrl + Shift + Enter 		将光标定位在上一行</span><br><span class="line">Ctrl + Shift + /            注释当前行</span><br><span class="line">Ctrl + R  					运行当前网页/刷新当前网页</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>一、Docker学习</title>
    <url>/2020/10/19/Docker/DockerStudy/</url>
    <content><![CDATA[<blockquote>
<p>Docker 学习</p>
</blockquote>
<ul>
<li><p>Docker 概述</p>
</li>
<li><p>Docker 安装</p>
</li>
<li><p>Docker 命令</p>
<ul>
<li>镜像命令</li>
<li>容器命令</li>
<li>操作命令</li>
<li>…</li>
</ul>
</li>
<li><p>Docker 镜像</p>
</li>
<li><p>容器数据卷</p>
</li>
<li><p>DockerFile</p>
</li>
<li><p>Docker网络原理</p>
</li>
<li><p>IDEA整合Docker</p>
</li>
<li><p>Docker Compose</p>
</li>
<li><p>Docker Swarm</p>
</li>
<li><p>CI\CD Jenkins</p>
</li>
</ul>
<h1 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h1><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>环境配置十分麻烦，每台机器都要部署环境(集群Redis、ES、Hadoop)</p>
<p>发布一个项目(jar  + (Redis  Mysql  JDK  ES)) 项目能不能带上环境安装打包</p>
<p>Java – jar(环境) — 打包项目带上环境(镜像) — (Docker仓库：商店) —下载发布的镜像 — 直接运行即可。</p>
<p>Docker的思想来源于集装箱！</p>
<p>核心思想：打包装箱。每个箱子都是互相隔离的。</p>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>2010  <code>dotCloud</code> 公司成立 – 做pass的云计算服务！LXC有关的容器技术！  将自己的技术（容器化技术）命名Docker！</p>
<p><code>开源</code> 2014.4.9，Docker1.0发布</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vm: linux centos原生镜像(一个电脑)  隔离，需要开多个虚拟机！ </span><br><span class="line">docker: 隔离,镜像(最核心的环境 mysql+jdk),运行镜像即可</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有关Docker</p>
</blockquote>
<p>Docker官网    <a href="https://www.docker.com/">https://www.docker.com/</a> </p>
<p>Docker文档    <a href="https://docs.docker.com/">https://docs.docker.com/</a> </p>
<p>Docker镜像     <a href="https://hub.docker.com/">https://hub.docker.com/</a>  </p>
<h2 id="Can-do"><a href="#Can-do" class="headerlink" title="Can do"></a>Can do</h2><blockquote>
<p>容器化技术</p>
</blockquote>
<p>比较Dokcer和虚拟机技术的不同:</p>
<ul>
<li>传统虚拟机，虚拟出一个硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件。</li>
<li>容器上的应用直接运行在宿主机的内核，容器是没有子的内核的，也没有虚拟我们的硬件，所以就轻便了</li>
<li>每个容器间是互相隔离，每个容器都有一个属于自己的文件系统，互不影响。</li>
</ul>
<blockquote>
<p>DevOps （开发、运维）</p>
</blockquote>
<p><strong>应用更快速的交付和部署</strong></p>
<p>传统：一堆帮助文档，安装程序</p>
<p>Docker：打包镜像发布测试，一键运行</p>
<p><strong>更便捷的升级和扩缩容</strong></p>
<p>使用了Dokcer之后，部署应用就和搭积木一样！</p>
<p>项目打包为一个镜像，扩展 服务器A！ 服务器B</p>
<p><strong>更简单的系统运维</strong></p>
<p>在容器化之后，开发，测试环境都是高度一致的。</p>
<p><strong>更高效的计算资源利用</strong></p>
<p>Docker是内核级别的虚拟化，可以在一个物理机上运行很多的容器实例！服务器的性能可以被压榨到极致。</p>
<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><p><img src="/2020/10/19/Docker/DockerStudy/study01.jpg"></p>
<p><strong>镜像（image）：</strong><br>docker镜像就好比是一个模板，可以通过这个模板来创建容器服务，tomcat镜像—&gt; run —-&gt; tomcat01容器（提供服务器）通过这个镜像可以创建多个容器（最终服务运行或者是项目运行就是在容器中的）</p>
<p><strong>容器（container）：</strong></p>
<p>docker利用容器技术，独立运行一个或者一个组应用。通过镜像来创建的。</p>
<p>启动，停止，删除，基本命令！</p>
<p>可以理解为一个简易的linux系统。</p>
<p><strong>仓库（repository）：</strong></p>
<p>仓库就是存镜像的地方！</p>
<p>仓库分为公有仓库和私有仓库</p>
<p>Docker Hub 、阿里云….</p>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><blockquote>
<p>环境准备</p>
</blockquote>
<p>1.linux基础</p>
<p>2.CentOS7</p>
<p>3.使用Xshell连接远程服务器进行操作</p>
<blockquote>
<p>环境查看</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 系统内核是 3.10 以上的</span></span><br><span class="line">[root@baohua ~]# uname -r</span><br><span class="line">3.10.0-1062.1.1.el7.x86_64</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 系统配置</span></span><br><span class="line">[root@baohua ~]# uname -r</span><br><span class="line">3.10.0-1062.1.1.el7.x86_64</span><br><span class="line">[root@baohua ~]# cat /etc/os-release</span><br><span class="line">NAME=&quot;CentOS Linux&quot;</span><br><span class="line">VERSION=&quot;7 (Core)&quot;</span><br><span class="line">ID=&quot;centos&quot;</span><br><span class="line">ID_LIKE=&quot;rhel fedora&quot;</span><br><span class="line">VERSION_ID=&quot;7&quot;</span><br><span class="line">PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br><span class="line">CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;</span><br><span class="line">HOME_URL=&quot;https://www.centos.org/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;</span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装</p>
</blockquote>
<p>帮助文档：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.卸载旧版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">                  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.安装需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.设置仓库镜像</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo	#默认是国外镜像</span><br><span class="line"> </span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo	#阿里云镜像</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.安装docker相关依赖 docker-ce 社区版  ee 企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.使用docker version查看是否安装成功</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/19/Docker/DockerStudy/study02.png" alt="1598795960410"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 7.hello-world</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/19/Docker/DockerStudy/study03.png" alt="1598780013729"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 8.查看一下下载的hello-world镜像</span></span><br><span class="line">[root@baohua ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        8 months ago        13.3kB</span><br></pre></td></tr></table></figure>
<p>了解：卸载docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.删除资源</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> /var/lib/docker	docker的默认工作路径！</span></span><br></pre></td></tr></table></figure>
<h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><p>配置使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://woyd8e7o.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2 id="回顾HelloWorld"><a href="#回顾HelloWorld" class="headerlink" title="回顾HelloWorld"></a>回顾HelloWorld</h2><p>run 的运行流程图</p>
<p><img src="/2020/10/19/Docker/DockerStudy/study04.png" alt="1598796388009"></p>
<h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p>Docker是什么工作的？</p>
<p>Docker是一个Client - Server结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问!</p>
<p>DockerServer 接收到  DockerClient的指令，就会执行这个命令!</p>
<p><img src="/2020/10/19/Docker/DockerStudy/study05.png" alt="1598798096204"></p>
<p><strong>Docker为什么比VM快？</strong></p>
<p>1.Docker有着比虚拟机更少的抽象层</p>
<p>2.docker是利用宿主机的内核，vm需要的是Guest OS。</p>
<p><img src="/2020/10/19/Docker/DockerStudy/study06.jpg"></p>
<p>所以说，新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机加载的是Guest OS，分钟级别的。而docker是利用宿主机的操作系统，省略了这个复杂的过程，秒级！</p>
<h1 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker verison		# 显示docker的基本信息</span><br><span class="line">docker info			# 显示docker的系统信息</span><br><span class="line">docker 命令 --help   # 帮助命令</span><br></pre></td></tr></table></figure>
<p>帮助文档地址： <a href="https://docs.docker.com/engine/reference/commandline/">https://docs.docker.com/engine/reference/commandline/</a> </p>
<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong>    查看所有本地的主机上的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        9 months ago        13.3kB</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line">REPOSITORY	镜像的仓库源</span><br><span class="line">TAG 		镜像的标签</span><br><span class="line">IMAGE ID	镜像的id</span><br><span class="line">CREATED		镜像的创建时间</span><br><span class="line">SIZE		镜像的大小</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项</span></span><br><span class="line">  -a, --all             # 列出所有镜像</span><br><span class="line">  -q, --quiet           # 只显示镜像的id</span><br></pre></td></tr></table></figure>
<p><strong>docker search</strong>    搜索镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua ~]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation??  10072               [OK]                </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS??  3692                [OK]     </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项，通过搜索来过滤</span></span><br><span class="line">--filter=stars=3000	 # 搜索出来的结果就是STARS大于3000的</span><br><span class="line">[root@baohua ~]# docker search mysql --filter=stars=3000</span><br><span class="line">NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql               MySQL is a widely used, open-source relation??  10072               [OK]                </span><br><span class="line">mariadb             MariaDB is a community-developed fork of MyS??  3692                [OK]      </span><br></pre></td></tr></table></figure>
<p><strong>docker pull</strong>    下载镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">[root@baohua ~]# docker pull mysql</span><br><span class="line">Using default tag: latest	# 如果不写tag，默认是 latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">bb79b6b2107f: Pull complete 	# 分层下载，docker imag的核心 联合文件系统</span><br><span class="line">49e22f6fb9f7: Pull complete </span><br><span class="line">842b1255668c: Pull complete </span><br><span class="line">9f48d1f43000: Pull complete </span><br><span class="line">c693f0615bce: Pull complete </span><br><span class="line">8a621b9dbed2: Pull complete </span><br><span class="line">0807d32aef13: Pull complete </span><br><span class="line">9eb4355ba450: Pull complete </span><br><span class="line">6879faad3b6c: Pull complete </span><br><span class="line">164ef92f3887: Pull complete </span><br><span class="line">6e4a6e666228: Pull complete </span><br><span class="line">d45dea7731ad: Pull complete </span><br><span class="line">Digest: sha256:86b7c83e24c824163927db1016d5ab153a9a04358951be8b236171286e3289a4	# 签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest #真实地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 相等价</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定版本下载</span></span><br><span class="line">[root@baohua ~]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">bb79b6b2107f: Already exists </span><br><span class="line">49e22f6fb9f7: Already exists </span><br><span class="line">842b1255668c: Already exists </span><br><span class="line">9f48d1f43000: Already exists </span><br><span class="line">c693f0615bce: Already exists </span><br><span class="line">8a621b9dbed2: Already exists </span><br><span class="line">0807d32aef13: Already exists </span><br><span class="line">6d2fc69dfa35: Pull complete </span><br><span class="line">56153548dd2c: Pull complete </span><br><span class="line">3bb6ba940303: Pull complete </span><br><span class="line">3e1888da91a7: Pull complete </span><br><span class="line">Digest: sha256:b3dc8d10307ab7b9ca1a7981b1601a67e176408be618fc4216d137be37dae10b</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/19/Docker/DockerStudy/study07.png" alt="1603020055478"></p>
<p><strong>docker rmi</strong>    删除镜像！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua ~]# docker rmi -f 镜像id  # 删除指定的镜像</span><br><span class="line">[root@baohua ~]# docker rmi -f 镜像id 镜像id 镜像id 镜像id  # 删除多个镜像</span><br><span class="line">[root@baohua ~]# docker rmi -f $(docker images -aq)		# 删除全部镜像</span><br></pre></td></tr></table></figure>
<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：有了镜像才可以创建容器，linux，下载一个cenos镜像来测试学习</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>
<p><strong>新建容器并启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line">--name=&quot;Name&quot;	容器名字	tomcat01	tomcat02，用来区分容器</span><br><span class="line">-d				后台方式运行</span><br><span class="line">-it 			使用交互方式运行，进入容器查看内容</span><br><span class="line">-p				指定容器的端口 -p 8080:8080</span><br><span class="line">	-p	ip:主机端口:容器端口</span><br><span class="line">	-p	主机端口:容器端口	(常用)</span><br><span class="line">	-p	容器端口</span><br><span class="line">	容器端口</span><br><span class="line">-P				随机指定端口</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试，启动并进入容器</span></span><br><span class="line">[root@baohua /]# docker run -it centos /bin/bash</span><br><span class="line">[root@7e3fbd81db47 /]# ls	# 查看容器内的centos，基础版本，很多命令不完善！</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从容器中退回主机</span></span><br><span class="line">[root@7e3fbd81db47 /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@baohua /]# ls</span><br><span class="line">bin   CloudResetPwdAgentNew     CloudrResetPwdAgent  etc   HostGuardAgent_Linux64_V1.12.47.rpm.sha256  lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  CloudResetPwdUpdateAgent  dev                  home  hostguard_setup_config.dat                  lib64  media       opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure>
<p><strong>列出所有运行的容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker ps 命令</span></span><br><span class="line"><span class="meta">		#</span><span class="bash"> 列出当前正在运行容器</span></span><br><span class="line">-a		# 列出当前正在运行的容器+带出历史运行过的容器</span><br><span class="line">-n=? 	# 显示最近创建的容器</span><br><span class="line">-q		# 只显示容器的编号</span><br><span class="line">[root@baohua /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@baohua /]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">7e3fbd81db47        centos              &quot;/bin/bash&quot;         3 minutes ago       Exited (0) 53 seconds ago                       amazing_perlman</span><br><span class="line">d47feff9d60d        bf756fb1ae65        &quot;/hello&quot;            7 weeks ago         Exited (0) 7 weeks ago                          busy_matsumoto</span><br></pre></td></tr></table></figure>
<p><strong>退出容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit	# 直接停止容器并退出</span><br><span class="line">Ctrl + P + Q #容器不停止退出</span><br></pre></td></tr></table></figure>
<p><strong>删除容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id					# 删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)	 # 删除所有的容器</span><br><span class="line">docker ps -a -q|xargs docker rm -f  # 删除所有的容器</span><br></pre></td></tr></table></figure>
<p><strong>启动和停止容器的操作</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id		# 启动容器</span><br><span class="line">docker restart 容器id		# 重启容器</span><br><span class="line">docker stop 容器id		# 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id		# 强制停止当前容器</span><br></pre></td></tr></table></figure>
<h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><p><strong>后台启动容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令	docker  run -d 容器名</span></span><br><span class="line">[root@baohua /]# docker  run -d centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题docker ps，发现 centos 停止了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常见的坑，docker容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span></span><br></pre></td></tr></table></figure>
<p><strong>查看日志</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f -t --tail number 容器id </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自己编写一段shell脚本</span></span><br><span class="line">[root@baohua /]# docker run -d centos /bin/sh -c &quot;while true;do echo baohua;sleep 1;done&quot;</span><br><span class="line"></span><br><span class="line">[root@baohua /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                       </span><br><span class="line">93253c31e8ab        centos          </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示日志</span></span><br><span class="line">-tf # 显示日志</span><br><span class="line">--tail number 显示日志条数</span><br><span class="line">[root@baohua /]# docker logs -ft --tail 10 93253c31e8ab</span><br></pre></td></tr></table></figure>
<p><strong>查看容器中的进程命</strong> ps</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker top 容器id</span></span><br><span class="line">[root@baohua /]# docker top 93253c31e8ab</span><br><span class="line">UID                 PID                 PPID                C                   STIME     </span><br><span class="line">root                4006                3990                0                   20:28     </span><br><span class="line">root                4492                4006                0                   20:33     </span><br></pre></td></tr></table></figure>
<p><strong>查看镜像的元数据</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@baohua /]# docker inspect 93253c31e8ab</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;93253c31e8ab4d48150849df5df3c17bc5c9caf0452de0dd6190c1fdfdd01b57&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-10-24T12:28:29.06351677Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo baohua;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 4006,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2020-10-24T12:28:29.321874046Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:0d120b6ccaa8c5e149176798b3501d4dd1885f961922497cd0abef155c869566&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/93253c31e8ab4d48150849df5df3c17bc5c9caf0452de0dd6190c1fdfdd01b57/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/93253c31e8ab4d48150849df5df3c17bc5c9caf0452de0dd6190c1fdfdd01b57/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/93253c31e8ab4d48150849df5df3c17bc5c9caf0452de0dd6190c1fdfdd01b57/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/93253c31e8ab4d48150849df5df3c17bc5c9caf0452de0dd6190c1fdfdd01b57/93253c31e8ab4d48150849df5df3c17bc5c9caf0452de0dd6190c1fdfdd01b57-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/nifty_lehmann&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;Capabilities&quot;: null,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/9380154604aff625203d598970a5c1eaece4ebeb5bb305c50df45b72530e9392-init/diff:/var/lib/docker/overlay2/6b853dc932a306b2bfdb53bbfc61b9e7895c642a4304070a65803cb2eb73b73a/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/9380154604aff625203d598970a5c1eaece4ebeb5bb305c50df45b72530e9392/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/9380154604aff625203d598970a5c1eaece4ebeb5bb305c50df45b72530e9392/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/9380154604aff625203d598970a5c1eaece4ebeb5bb305c50df45b72530e9392/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;93253c31e8ab&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo baohua;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20200809&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;44ee36be6bda419c280cd2959cb6f5f149e6f9c3d3a2de704a99dc0b084046f5&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/44ee36be6bda&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;5f02c1a8a57cc3216becb9a50bbfeb094686efff2ec9c1659072d6531fbac55e&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;657920809e64151f2662e4bbce86ab2072a2d90f3e66c150390a8aa26459625e&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;5f02c1a8a57cc3216becb9a50bbfeb094686efff2ec9c1659072d6531fbac55e&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>进入当前正在运行的容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通常容器都是使用后台方式运行，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@baohua /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">93253c31e8ab        centos              &quot;/bin/sh -c &#x27;while t??   16 minutes ago      Up 16 minutes                           nifty_lehmann</span><br><span class="line">[root@baohua /]# docker exec -it 93253c31e8ab /bin/bash</span><br><span class="line">[root@93253c31e8ab /]# ls</span><br><span class="line">bin  etc   lib	  lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line">[root@93253c31e8ab /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 12:28 ?        00:00:00 /bin/sh -c while true;do echo baohua;sleep 1;done</span><br><span class="line">root      1015     0  0 12:45 pts/0    00:00:00 /bin/bash</span><br><span class="line">root      1036     1  0 12:45 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/s</span><br><span class="line">root      1037  1015  0 12:45 pts/0    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@baohua ~]# docker attach 93253c31e8ab</span><br><span class="line">正在执行当前的代码...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">exec</span>		$ 进入容器后开启一个新的终端，可以在里面操作(常用)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker attach		$ 进入容器正在执行的终端，不会启动新的进程！</span></span><br></pre></td></tr></table></figure>
<p><strong>从容器内拷贝文件到主机上</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前主机目录下</span></span><br><span class="line">[root@baohua home]# ls</span><br><span class="line">baohua</span><br><span class="line">[root@baohua home]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">a552144f7d54        centos              &quot;/bin/bash&quot;         11 seconds ago      Up 11 seconds                           interesting_black</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入docker容器内部</span></span><br><span class="line">[root@baohua home]# docker attach a552144f7d54</span><br><span class="line">[root@a552144f7d54 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@a552144f7d54 /]# cd home</span><br><span class="line">[root@a552144f7d54 home]# ls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在容器内部新建一个文件</span></span><br><span class="line">[root@a552144f7d54 home]# touch test.java</span><br><span class="line">[root@a552144f7d54 home]# ls</span><br><span class="line">test.java</span><br><span class="line">[root@a552144f7d54 home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@baohua home]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">a552144f7d54        centos              &quot;/bin/bash&quot;         55 seconds ago      Exited (0) 3 seconds ago                       interesting_black</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将文件拷贝到主机上</span></span><br><span class="line">[root@baohua home]# docker cp a552144f7d54:/home/test.java /home</span><br><span class="line">[root@baohua home]# ls</span><br><span class="line">baohua  test.java</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现</span></span><br></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><img src="/2020/10/19/Docker/DockerStudy/study08.png"></p>
<p><img src="/2020/10/19/Docker/DockerStudy/study09.png" alt="1603545368300"></p>
<p><img src="/2020/10/19/Docker/DockerStudy/study10.png" alt="1603545432230"></p>
<p><img src="/2020/10/19/Docker/DockerStudy/study11.png" alt="img"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 框架</title>
    <url>/2021/01/22/SSM/spring/</url>
    <content><![CDATA[<h1 id="Spring-框架"><a href="#Spring-框架" class="headerlink" title="Spring 框架"></a>Spring 框架</h1><h2 id="一、Spring介绍"><a href="#一、Spring介绍" class="headerlink" title="一、Spring介绍"></a>一、Spring介绍</h2><p><img src="/2021/01/22/SSM/spring/spring-overview.png" alt="spring overview"></p>
<h3 id="1-1-Spring-核心容器-Core-Container"><a href="#1-1-Spring-核心容器-Core-Container" class="headerlink" title="1.1 Spring 核心容器 (Core Container)"></a>1.1 Spring 核心容器 (Core Container)</h3><p>核心容器包括spring-core，spring-beans，spring-context，spring-context-support和springexpression（SpEL）等模块。</p>
<ul>
<li><strong>spring-core</strong>和<strong>spring-beans</strong>模块是Spring框架的基础，包括控制反转（依赖注入）等功能。 BeanFactory是工厂模式的复杂实现。可以把配置和依赖从实际编码逻辑中解耦。 </li>
<li><strong>spring-context</strong>模块是在Core和Bean模块的基础上建立起来的，它以一种类似于JNDI注册的方式 访问对象。Context模块继承自Bean模块，并且添加了国际化、事件传播、资源加载等功能。 Context模块也支持Java EE的功能，比如EJB、JMX和远程调用等。spring-context-support提供了 对第三方库集成到Spring上下文的支持，比如缓存（EhCache, Guava, JCache）、邮件 （JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity） 等。 </li>
<li><strong>spring-expression</strong>模块提供了强大的表达式语言用于在运行时查询和操作对象图。它是JSP2.1规 范中定义的统一表达式语言的扩展，支持set和get属性值、属性赋值、方法调用、访问数组集合及 索引的内容、逻辑算术运算、命名变量、通过名字从Spring IoC容器检索对象，还支持列表的投 影、选择以及聚合等。</li>
</ul>
<h3 id="1-2-AOP-和-Instrumentation"><a href="#1-2-AOP-和-Instrumentation" class="headerlink" title="1.2 AOP 和 Instrumentation"></a>1.2 AOP 和 Instrumentation</h3><ul>
<li><strong>spring-aop</strong>模块提供了面向切面编程（AOP）的实现，可以定义诸如方法拦截器和切入点等，从 而使横切的代码彻底的解耦出来。 - </li>
<li><strong>spring-aspects</strong>模块提供了对AspectJ的集成。</li>
<li><strong>spring-instrument</strong>模块通过agent保存了一个Instrumentation实例，目前主要用来实现AOP的 加载时植入。 </li>
<li><strong>spring-instrument-tomcat</strong>模块是spring-instrument模块对应于tomcat的处理模块。</li>
</ul>
<h3 id="1-3-消息-Messaging"><a href="#1-3-消息-Messaging" class="headerlink" title="1.3 消息 Messaging"></a>1.3 消息 Messaging</h3><p>Spring 4 包含的<strong>spring-messaging</strong>模块是从Spring集成项目的关键抽象中提取出来的，这些项目包括 <strong>Message</strong>、<strong>MessageChannel</strong>、<strong>MessageHandler</strong>和其它服务于消息处理的项目。这个模块也包含一 系列的注解用于映射消息到方法，这类似于Spring MVC基于编码模型的注解。</p>
<h3 id="1-4-数据访问-集成"><a href="#1-4-数据访问-集成" class="headerlink" title="1.4 数据访问/集成"></a>1.4 数据访问/集成</h3><p>数据访问与集成层包含JDBC、ORM、OXM（Object XML Mapping）、JMS和事务模块。</p>
<ul>
<li><strong>spring-jdbc</strong>模块提供了JDBC抽象层，它消除了冗长的JDBC编码和对数据库特定错误代码的解 析。</li>
<li><strong>spring-tx</strong>模块支持编程式事务和声明式事务，可用于实现了特定接口的类和所有的POJO对象。 （编程式事务需要自己写beginTransaction()、commit()、rollback()等事务管理方法，声明式事务 是通过注解或配置由spring自动处理，编程式事务粒度更细） </li>
<li><strong>spring-orm</strong>模块提供了对流行的ORM框架的集成，包括jpa、hibernate等。通过此模块可以让这 些ORM框架和spring的其它功能整合，比如前面提及的事务管理。 </li>
<li><strong>spring-oxm</strong>模块提供了对OXM实现的支持，比如JAXB、Castor、XML Beans、JiBX、XStream 等。 </li>
<li><strong>spring-jms</strong>模块包含生产（produce）和消费（consume）消息的功能。从Spring 4.1开始，集成了<strong>spring-messaging</strong>模块。</li>
</ul>
<h3 id="1-5-Web"><a href="#1-5-Web" class="headerlink" title="1.5 Web"></a>1.5 Web</h3><p>Web层包括<strong>spring-web</strong>、<strong>spring-webmvc</strong>、<strong>spring-websocket</strong>、<strong>spring-webmvc-portlet</strong>等模 块。 </p>
<ul>
<li><strong>spring-web</strong>模块提供面向web的基本功能和面向web的应用上下文，比如文件上传功能、使用 Servlet监听器初始化IoC容器等。它还包括HTTP客户端以及Spring远程调用中与web相关的部 分。 </li>
<li><strong>spring-webmvc</strong>模块（即Web-Servlet模块）为web应用提供了模型视图控制MVC和REST Web服 务的实现。Spring的MVC框架可以使领域模型代码和web表单完全地分离，且可以与Spring框架 的其它所有功能进行集成。 </li>
<li><strong>spring-webmvc-portlet</strong>模块（即Web-Portlet模块）提供了用于Portlet环境的MVC实现，并反映了<strong>spring-webmvc</strong>模块的功能。Spring5已经废弃改模块。</li>
</ul>
<h3 id="1-6-测试-Test"><a href="#1-6-测试-Test" class="headerlink" title="1.6 测试(Test)"></a>1.6 测试(Test)</h3><p><strong>spring-test</strong>模块通过JUnit和TestNG组件支持单元测试和集成测试。它提供了一致性地加载和缓存 Spring上下文，也提供了用于单独测试代码的模拟对象（mock object）。</p>
<h2 id="二、Spring工程搭建"><a href="#二、Spring工程搭建" class="headerlink" title="二、Spring工程搭建"></a>二、Spring工程搭建</h2><h3 id="2-1-工程依赖"><a href="#2-1-工程依赖" class="headerlink" title="2.1 工程依赖"></a>2.1 工程依赖</h3><p>以下为Spring的pom：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>ssm-demo Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-version</span>&gt;</span>5.2.11.RELEASE<span class="tag">&lt;/<span class="name">spring-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j2-version</span>&gt;</span>2.14.0<span class="tag">&lt;/<span class="name">log4j2-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql-version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">mysql-version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring 核心依赖--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- IOC必选，spring上下文包--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖传递导入：commons-logging、spring-core、spring-beans、springexpression、spring-apo--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring-aop aop必选--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring-aspects：AOP必选，spring非经典AOP的依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖传递导入：aspectjweaver--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j-jcl：可选，commons-logging和log4j的桥接包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖传递导入：log4j-api--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-jcl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--log4j-core：可选，log4j2的核心包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖传递导入：log4j-api--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j2-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>ssm-demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="2-2-配置文件"><a href="#2-2-配置文件" class="headerlink" title="2.2 配置文件"></a>2.2 配置文件</h3><p><strong>1.spring配置文件</strong></p>
<p>Spring是一个大的容器，可以基于配置文件创建、管理bean对象，Spring2.5之前必须通过XML文件提 供配置信息。配置文件名没有规范，可以随意，如：applicationContext.xml，以下是基本配置文件示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>配置解析：</strong></p>
<ul>
<li>xmlns: XML Namespace的缩写，可译为“XML命名空间”，主要为了解决两个文档包含同名 元素时引发的命名冲突。</li>
<li>xmlns:xsi：定义一个Schema的实例命名空间。只有做了这个定义才能使用 schemaLocation属性。</li>
<li>xsi:schemaLocation：定义了XML Namespace和对应的XSD（Xml Schema Definition）文 档的位置的关系。</li>
</ul>
<p><strong>注意</strong>：maven工程需要将这个放在 resources 目录下</p>
</blockquote>
<h3 id="2-3启动容器API"><a href="#2-3启动容器API" class="headerlink" title="2.3启动容器API"></a>2.3启动容器API</h3><p>ApplicationContext 表示Spring容器，负责根据配置文件创建、组装对象实例，常用实现：</p>
<ul>
<li>ClassPathXmlApplicationContext：从classpath下加载配置文件，根路径为classpath</li>
<li>FileSystemXmlApplicationContext：按照文件路径加载配置文件</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方式ClassPathXmlApplicationContext</span></span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式 FileSystemXmlApplicationContext</span></span><br><span class="line">ApplicationContext fileSystemXmlContext = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="2-4-容器日志"><a href="#2-4-容器日志" class="headerlink" title="2.4 容器日志"></a>2.4 容器日志</h3><h4 id="2-4-1-Commons-Logging"><a href="#2-4-1-Commons-Logging" class="headerlink" title="2.4.1 Commons Logging"></a>2.4.1 Commons Logging</h4><p>Spring使用的日志工具是Jakarta Commons Logging API（JCL），Common-Logging为其他日志工具 提供一个抽象层，主要为中间件和工具开发者提供日志系统的切換： Commons Logging会自动查找可用的日志系统， Commons Logging装载日志系统的流程如下：</p>
<blockquote>
<ol>
<li>查找名为org.apache.commons.logging.Log的属性配置，该属性可通过代码或者配置文件&lt;commons-logging.properties&gt;配置。如配置使用log4j2：</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;#</span> <span class="string">commons-logging.properties 配置文件内容</span></span><br><span class="line"><span class="meta">&gt;org.apache.commons.logging.Log</span>=<span class="string">org.apache.commons.logging.impl.Log4JLogger</span></span><br><span class="line"><span class="meta">&gt;org.apache.commons.logging.LogFactory</span>=<span class="string">org.apache.commons.logging.impl.LogFactoryImpl</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查找名为org.apache.commons.logging.Log的系统属性 。 </li>
<li>如果Log4J日志记录系统在应用程序类路径中可用，使用相应的包装器类（Log4JLogger）。</li>
<li>如果应用程序在JDK 1.4系统上执行，使用相应的包装器类（Jdk14Logger）。</li>
<li>默认的简单日志记录包装器（SimpleLog）。</li>
</ol>
</blockquote>
<p>示例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Log log = LogFactory.getLog(Test.class);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;TEST commons - logging&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-4-2-Log4J2"><a href="#2-4-2-Log4J2" class="headerlink" title="2.4.2 Log4J2"></a><strong>2.4.2 Log4J2</strong></h4><p>Log4j2是Java中使用频率非常高的日志系统，Commons Logging 可以桥接到Log4j2，使用步骤如下：</p>
<p><strong>1. 导入Log4j2相关包：</strong></p>
<blockquote>
<p>log4j-jcl-2.7.jar：与Commons Logging 的桥接包 </p>
<p>log4j-core-2.7.jar：log4j的实现 </p>
<p>log4j-api-2.7.jar：日志接口和创建Logger实例的工具类，便于log4j桥接到其它日志工具，如： SLF4</p>
</blockquote>
<p><strong>2. 配置Commons Logging使用Log4j2(可选)</strong></p>
<blockquote>
<p>Commons Logging可以自动查找类路径下的日志系统，如需指定，可以在类路径下创建 commonslogging.properties 配置文件</p>
</blockquote>
<p><strong>3. Log4j2配置文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- status属性表示log4j2本身的日志信息打印级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先定义所有的appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个输出控制台的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） --&gt;</span></span><br><span class="line">            &lt;ThresholdFilter</span><br><span class="line">                    level=&quot;trace&quot;</span><br><span class="line">                    onMatch=&quot;ACCEPT&quot;</span><br><span class="line">                    onMismatch=&quot;DENY&quot;</span><br><span class="line">            /&gt;</span><br><span class="line">            <span class="comment">&lt;!--日志的格式:http://logging.apache.org/log4j/2.x/manual/layouts.html --&gt;</span></span><br><span class="line">            &lt;PatternLayout</span><br><span class="line">                    pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;/&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志信息输出到文件，这个log每次运行程序会自动清空，由append属性决定 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 有关属性替换：http://logging.apache.org/log4j/2.x/manual/lookups.html --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;log&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;sys:app.path&#125;log/test.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            &lt;PatternLayout</span><br><span class="line">                    pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;/&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果文件超过size，则日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;sys:app.path&#125;logs/app.log&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">&quot;log/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            &lt;PatternLayout</span><br><span class="line">                    pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;/&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;50MB&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义logger，只有定义了logger并引入appender，appender才会生效 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--建立默认的root logger --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- additivity:子Logger 是否继承 父Logger 的 输出源（appender） 的标志位 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;com.demo&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其它日志工具桥接log4j：</p>
<p><img src="/2021/01/22/SSM/spring/20150325191622288.png" alt="img"></p>
<h2 id="三、Spring常用模块"><a href="#三、Spring常用模块" class="headerlink" title="三、Spring常用模块"></a>三、Spring常用模块</h2><h3 id="3-1-IOC-（Inversion-of-Control）"><a href="#3-1-IOC-（Inversion-of-Control）" class="headerlink" title="3.1 IOC （Inversion of Control）"></a>3.1 IOC （Inversion of Control）</h3><blockquote>
<p>IOC ：inversion of control    控制反转。</p>
<p>DI ：dependency injection    依赖注入， ioc 的另一种叫法，更能体现这个模块的功能</p>
</blockquote>
<p>spring-beans 和 spring-context 是 Spring Framework 的 <strong>IOC 容器的根本</strong>。 BeanFactory 接口提供了 一种能够管理任何类型对象的高级配置机制。ApplicationContext 是 BeanFactory 的一个子接口。ApplicationContext 使得与Spring 的AOP集成变得更简单，添加了资源处理（国际化中使用）、事件发布，以及特定于应用程序层的上下文，例如 <code>WebApplicationContext</code>, 简而言之，BeanFactory提供了配置框架和基本功能，而ApplicationContext 添加了更多企业应用功能。ApplicationContext 完整扩展了BeanFactory。</p>
<h4 id="3-1-1-基于XML-配置IOC"><a href="#3-1-1-基于XML-配置IOC" class="headerlink" title="3.1.1 基于XML 配置IOC"></a>3.1.1 基于XML 配置IOC</h4><h5 id="3-1-1-1-创建Bean"><a href="#3-1-1-1-创建Bean" class="headerlink" title="3.1.1.1 创建Bean"></a>3.1.1.1 创建Bean</h5><p><strong>applicationContext.xml :</strong></p>
<ol>
<li><strong>使用构造器实例化Bean</strong></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.构造函数实例化 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用空构造器进行定义，使用此种方式，class属性指定的类必须有空构造器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.brendan.app.model.People&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    使用有参数构造器进行定义，可以使用&lt;constructor-arg&gt;标签指定构造器参数值，</span></span><br><span class="line"><span class="comment">    其中index表示位置， value表示常量值，也可以指定引用使用ref来引用另一个Bean定义</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.brendan.app.model.People&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;people&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>使用静态工厂方式实例化Bean</strong></li>
</ol>
<ul>
<li>创建Hello 对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hello</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>HelloInstanceFactory 创建静态方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloInstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态工厂实例化Hello对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hello <span class="title">newInstanceHello</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Hello(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--2. 使用静态工厂方式实例化Bean--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> 使用这种方式除了指定必须的class属性，还要指定factory-method属性来指定实例化Bean的方法，</span></span><br><span class="line"><span class="comment"> 而且使用静态工厂方法也允许指定方法参数，spring ioc容器将调用此属性指定的方法来获取Bean</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.brendan.app.factory.HelloInstanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;newInstanceHello&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;This is String!&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>使用实例工厂方法实例化Bean</strong></li>
</ol>
<ul>
<li>Hello实体对象同上，HelloInstanceFactory2 去掉了 <strong>static</strong> 关键字。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloInstanceFactory2</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实例工厂实例化Hello对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hello <span class="title">newInstanceHello</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Hello(s);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--3. 使用实例工厂方法实例化，工厂本身也是一个bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.brendan.app.factory.HelloInstanceFactory2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello2&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;newInstanceHello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;This is Instance Factory Bean!&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用FactoryBean实例化，类似于实例工厂方法实例化，不过这个工厂需要实现FactoryBean接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user21&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.brendan.app.factory.MyFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>FactoryBean接口是插入到Spring IoC容器用来定制实例化逻辑的一个接口点。如果初始化逻辑比 较复杂，可以通过FactoryBean实例化:</p>
<p>FactoryBean接口提供三个方法：</p>
<ol>
<li>Object getObject()：返回一个由这个工厂创建的对象实例。这个实例可能被共享（取决于 isSingleton()的返回值是singleton或prototype） </li>
<li>boolean isSingleton()：如果要让这个FactoryBean创建的对象实例为singleton则返回 true，否则返回false。 </li>
<li>Class getObjectType()：返回通过getObject()方法返回的对象类型，如果该类型无法预料则 返回null。</li>
</ol>
</blockquote>
<ul>
<li>TEST </li>
</ul>
<p><img src="/2021/01/22/SSM/spring/image-20210110125847512.png" alt="image-20210110125847512"></p>
<h5 id="3-1-1-2-依赖注入"><a href="#3-1-1-2-依赖注入" class="headerlink" title="3.1.1.2 依赖注入"></a>3.1.1.2 依赖注入</h5><blockquote>
<p><strong>注</strong>： 三种方式使用一种即可</p>
</blockquote>
<p>3.1.1.2.1 <strong>构造器注入</strong></p>
<p>构造器注入可以根据<strong>参数索引注入、参数类型注入或Spring3支持的参数名注入</strong>。参数名注入是有限制的，需要在编译时打开调试模式（即在编译时使用“javac –g:vars”选项,在class文件中生成变量调试信息，默认是不包含变量调试信息的），否则获取不到参数名字，或在构造器上使用注解 @ConstructorProperties来指定参数名  -&gt; <code>@ConstructorProperties(&#123;&quot;age&quot;, &quot;name&quot;&#125;)</code>。</p>
<p>3.1.1.2.2 <strong>属性注入</strong></p>
<p>属性注入是指通过调用bean的属性设置方法来注入依赖项，在bean中需要存在对应的set方法。</p>
<p>3.1.1.2.3 <strong>注解注入</strong></p>
<p>也可以使用注解配置依赖注入，注解注入是不需要提供Setter方法的，Spring通过泛型修改依赖项的访问控制，然后直接设置属。但是需要通过配置项<code>&lt;context:annotation-config/&gt;</code>或者<code>&lt;context:component-scan base-package=&quot;&quot;/&gt;</code> 来加载对应的注解处理器。</p>
<p>实例: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserDAO userDAO = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>具体配置如下:</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.brendan.app.model.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给属性赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hua_hua&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 三种注入方式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.通过构造注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.brendan.app.model.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhang-san&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.Setter 注入 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.brendan.app.model.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--属性注入简写  xmlns:p=&quot;http://www.springframework.org/schema/p&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user22&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.brendan.app.model.User&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:userName</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">p:password</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3. 注解注入 通过以下--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.brendan.app&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>自动注入</strong></p>
<p>Spring可以自动按照名称或者类型注入依赖，自动注入默认是禁用的，可以通过以下方式之一启用： </p>
<ol>
<li>在中通过autowire=”” 配置,只对这个生效 </li>
<li>在中通过default-autowire=””配置,当前文件中所有都生效</li>
</ol>
<p>autowire=”” 可取的值如下:</p>
<ul>
<li>default: 默认值,根据全局default-autowire=””.默认全局和局部都没有配置情况下,相当于no</li>
<li>no: 不自动注入</li>
<li>byName: 通过名称自动注入（bean的set方法）.在Spring容器中找类的Id</li>
<li>byType: 根据类型注入，容器中依赖的同类型bean只能有一个，否则抛出异常</li>
<li>constructor: 根据构造方法注入.</li>
</ul>
<h3 id="3-1-2-基于注解配置IOC"><a href="#3-1-2-基于注解配置IOC" class="headerlink" title="3.1.2 基于注解配置IOC"></a>3.1.2 基于注解配置IOC</h3><p>为了缩减XML的体积，以及把配置元数据和代码放在一起，Spring2.5开始支持基于注解的配置，总体 的思路是让Spring扫描类路径下的Class，通过反射检查是否有特定注解，如果类上存在@Service一类 的注解则实例化该类为bean，依赖注入由自动注册的相关<strong>BeanPostProcessor</strong>根据注解来完成。</p>
<h4 id="3-1-2-1-获取上下文"><a href="#3-1-2-1-获取上下文" class="headerlink" title="3.1.2.1 获取上下文"></a>3.1.2.1 获取上下文</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 基于BeanPostProcessor与注解进行依赖注入。</span></span><br><span class="line"><span class="comment">* 通过扫描classpath并匹配过滤器来隐式地检测相关组件。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext_aop.xml&quot;</span>);</span><br><span class="line">UserService userService = (UserService)context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">userService.create();</span><br></pre></td></tr></table></figure>
<h4 id="3-1-2-2-创建Bean"><a href="#3-1-2-2-创建Bean" class="headerlink" title="3.1.2.2 创建Bean"></a>3.1.2.2 创建Bean</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Spring 扫描指定路径下的文件，根据注解去实例化bean，</span></span><br><span class="line"><span class="comment">     同时注册相关BeanPostProcessor，这些 BeanPostProcessor会处理Bean中DI相关注解 如：(@Autowired)</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.brendan.app&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>context:component-scan：</strong></p>
<ul>
<li><p>如果解析配置文件时发现该标签，将会由ComponentScanBeanDefinitionParser解析标 签，然后通过ClassPathBeanDefinitionScanner扫描类，处理的注解:</p>
<ul>
<li>@Component，所有受Spring管理的组件的通用形式； 而@Repository、@Service和 @Controller则是@Component的细化， 用来表示更具体的组件。</li>
<li>@Service，服务层, @Scope(“prototype”)可以和Service组合使用，来指定scope的属性。</li>
<li>@Controller，表现层</li>
<li>@Repository， 持久化层</li>
</ul>
</li>
<li><p>AutowiredAnnotationBeanPostProcessor 和CommonAnnotationBeanPostProcessor会隐式地被包括进来，不再需要context:annotation-config配置项。</p>
</li>
<li><p>base-package: 可以使用如下字符组合路径，实际查找时使用的是转换后的路径(前面加 classpath :，后面加/* */ *.class) Apache Ant样式的路径有三种通配符匹配方法，这些可以组合出很多种灵活的路径模式。</p>
<ul>
<li><p><code>?</code> : 匹配任何单字符</p>
</li>
<li><p><code>*</code> : 匹配0或者任意数量的字符</p>
</li>
<li><p><code>**</code> : 匹配0或者更多的目录 如果配置的为： com/demo/spring/sample/**/service</p>
<p>则查找时会连接为： <code>classpath*:com/demo/spring/sample/**/service/**/*.class</code></p>
</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="3-1-2-3-依赖注入"><a href="#3-1-2-3-依赖注入" class="headerlink" title="3.1.2.3 依赖注入"></a>3.1.2.3 依赖注入</h4><p>基于注解的依赖注入需要特殊的BeanPostProcessor，这些特殊的<strong>BeanPostProcessor</strong>可以通过两种方式创建：</p>
<ol>
<li>&lt;context:annotation-config /&gt; ，隐式注册的部分post-processors:<ul>
<li>AutowiredAnnotationBeanPostProcessor ： @Autowired</li>
<li>CommonAnnotationBeanPostProcessor：支持常用的Java注解，特别是javax.annotation包 中的JSR-250注释。 许多Java EE 5以及Java 6的JAX-WS的Java注释都支持。 @Resource</li>
</ul>
</li>
<li>&lt;context:component-scan /&gt;，开启自动扫描的时候隐式注册<ul>
<li>AutowiredAnnotationBeanPostProcessor</li>
<li>CommonAnnotationBeanPostProcessor</li>
</ul>
</li>
</ol>
<p><strong>BeanPostProcessor与注解依赖注入:</strong> </p>
<ol>
<li>@Autowired:按照类型自动装配，可以放置在构造方法、属性、参数等地方，<strong>按类型自动注入</strong> </li>
<li>@Qualifier(“userDao”):通过类型的自动注入可能会有多个候选，可以结合这个注解来指定<strong>bean 的名称</strong>，单独使用无效 </li>
<li>@Resource、@Resource(“userDao”)，相当于@Autowired、@Qualifier(“userDao”)的组合</li>
</ol>
<h4 id="3-1-3-Bean的作用域"><a href="#3-1-3-Bean的作用域" class="headerlink" title="3.1.3 Bean的作用域"></a>3.1.3 Bean的作用域</h4><p>通过scope=””指定bean对象的生存周期，scope=” “ 可取值:</p>
<ul>
<li>globalSession：类似于标准HTTP Session范围，只适用于基于portlet的web应用程序的上下文</li>
<li>singleton：bean在IOC容器中以单例方式存在，<strong>默认值</strong></li>
<li>prototype：每次调用Bean时，都返回一个新的实例 </li>
<li>request：每次请求都创建一个bean，只在web相关的ApplicationContext中可用 </li>
<li>session：每个会话都创建一个bean，只在web相关的ApplicationContext中可用</li>
</ul>
<h4 id="3-1-4-Bean的生命周期"><a href="#3-1-4-Bean的生命周期" class="headerlink" title="3.1.4 Bean的生命周期"></a>3.1.4 Bean的生命周期</h4><p>Spring自带了两种不同类型的容器。两种容器的的bean生命周期略有不同。</p>
<ol>
<li>bean工厂（由org.springframework.beans.factory.BeanFactory接口定义）是最简单的容器，提供基本的DI 支持。 </li>
<li>应用上下文（由org.springframework.context.ApplicationContext接口定义）,基于BeanFactory 构建，并提供应用框架级别的服务，例如 从属性文件解析文本信息以及发布应用事件给感兴趣的事件监听者。</li>
</ol>
<p><strong>ApplicationContext Bean生命周期:</strong></p>
<ol>
<li>Spring对bean进行实例化； </li>
<li>Spring将值和bean的引用注入到bean对应的属性中； </li>
<li>如果bean实现了BeanNameAware接口，Spring将bean的ID传递给setBean-Name()方法；</li>
<li>如果bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()方法，将BeanFactory 容器实例传入； </li>
<li>如果bean实现了ApplicationContextAware接口，Spring将调用setApplicationContext()方法，将 bean所在的应用上下文的引用传入进来；</li>
<li>如果上下文中存在实现了BeanPostProcessor接口的bean，Spring将调用它们的 postProcessBeforeInitialization()方法；</li>
<li>如果bean实现了InitializingBean接口，Spring将调用它们的after-PropertiesSet()方法。</li>
<li>如果bean使用init-method声明了初始化方法，该方法被调用；</li>
<li>如果上下文中存在实现了BeanPostProcessor接口的bean，Spring将调用它们的 postProcessAfterInitialization()方法； 经过以上过程之后，就可以正式使用该Bean了，对于 scope为singleton的Bean,它们将一直驻留在应用上下文中，直到该应用上下文被销毁;而对于 scope为prototype的Bean,每次被调用都回new一个对象，而且生命周期也交给调用方管理了，不 再是Spring容器进行管理了。</li>
<li>容器关闭后，如果Bean实现了DisposableBean接口，则会调用该接口的destroy()方法。</li>
<li>如果Bean配置了destroy-method方法，则会执行destroy-method配置的方法，至此，整个Bean 生命周期结束。</li>
</ol>
<p><strong>BeanFactory Bean生命周期：</strong> 与ApplicationContext相比，有如下几点不同：</p>
<ol>
<li>BeanFactory容器中，不会调用ApplicationContextAware接口的setApplicationContext()方法。</li>
<li>BeanPostProcessor接口的postProcessBeforeInitialization方法和postProcessAfterInitialization 方法不会自动调用,必须自己通过代码手动注册</li>
<li>BeanFactory容器启动的时候，不会去实例化所有bean，包括所有scope为singleton且非延迟加载的bean也是一样，而是在调用的时候去实例化。</li>
</ol>
<h3 id="3-2-AOP-（Aspect-Oriented-Programming）"><a href="#3-2-AOP-（Aspect-Oriented-Programming）" class="headerlink" title="3.2 AOP （Aspect Oriented Programming）"></a>3.2 AOP （Aspect Oriented Programming）</h3><p><strong>面向切面编程（AOP）</strong>通过提供另外一种思考程序结构的途经来弥补面向对象编程（OOP）的不足。在 OOP中模块化的关键单元是类（classes），而在AOP中模块化的单元则是切面。切面能对关注点进行模块化，例如横切多个类型和对象的事务管理。（在AOP术语中通常称作横切（crosscutting）关注点。）</p>
<h4 id="3-2-1-AOP-的基本概念"><a href="#3-2-1-AOP-的基本概念" class="headerlink" title="3.2.1 AOP 的基本概念"></a>3.2.1 AOP 的基本概念</h4><ul>
<li><strong>切面 （Aspect）</strong></li>
</ul>
<p>一个关注点的模块化，是通知和切点的结合。通知和切点共同定义了切面的全部内容——它是什么，在 何时和何处完成其功能 。</p>
<ul>
<li><strong>连接点 （Joinpoint）</strong></li>
</ul>
<p>连接点是在应用执行过程中能够插入切面的一个点。这个点可以是调用方法时、抛出异常时、甚至修改 一个字段时。切面代码可以利用这些点插入到应用的正常流程之中，并添加新的行为。因为Spring基于 代理实现AOP，所以只支持方法连接点。</p>
<ul>
<li><strong>通知（Advice）</strong></li>
</ul>
<p>在切面的某个特定的连接点上执行的动作。Spring切面可以应用5种类型的通知：</p>
<ol>
<li>前置通知（Before）：在目标方法被调用之前调用通知功能；</li>
<li>后置通知 （After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么；</li>
<li>返回通知 （AfterReturning）：在目标方法成功执行之后调用通知；</li>
<li>异常通知 （AfterThrowing）：在目标方法抛出异常后调用通知；</li>
<li>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。</li>
<li>引入通知（Introduction）：用来给一个类型声明额外的方法或属性。Spring允许引入新的接口 （以及一个对应的实现）到任何被代理的对象。可以在无需修改现有的类的情况下，让它们具有新 的行为和状态。</li>
</ol>
<ul>
<li><strong>切入点（Ponitcut）</strong></li>
</ul>
<p>切入点是匹配连接点的表达式。通知和一个切入点表达式关联，并在满足这个切入点的连接点上运行。 一个切面并不需要通知应用的所有连接点。切点有助于缩小切面所通知的连接点的范围。</p>
<ul>
<li><strong>目标对象（Target Object）</strong></li>
</ul>
<p>被一个或者多个切面所通知的对象。也被称做被通知（advised）对象。 既然Spring AOP是通过运行时 代理实现的，这个对象永远是一个被代理（proxied）对象。</p>
<ul>
<li><strong>AOP 代理（AOP Proxy）</strong></li>
</ul>
<p>AOP框架创建的对象，用来实现切面（例如通知方法执行等等）。在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。</p>
<ul>
<li><strong>织入（Weaving）</strong></li>
</ul>
<p>织入是把切面应用到目标对象并创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。 在目标对象的生命周期里有多个点可以进行织入：</p>
<ol>
<li>编译期：切面在目标类编译时被织入。这种方式需要特殊的编译器。AspectJ的织入编译器就是以 这种方式织入切面的。</li>
<li>类加载期：切面在目标类加载到JVM时被织入。这种方式需要特殊的类加载器（ClassLoader）， 它可以在目标类被引入应用之前增强该目标类的字节码。AspectJ 5的加载时织入（loadtimeweaving，LTW）就支持以这种方式织入切面。Spring可以通过spring-instrument使用 AspectJ 的加载时植入。</li>
<li>运行期：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象 动态地创建一个代理对象。Spring AOP默认就是以这种方式织入切面的。</li>
</ol>
<h4 id="3-2-2-Spring-AOP"><a href="#3-2-2-Spring-AOP" class="headerlink" title="3.2.2 Spring AOP"></a>3.2.2 Spring AOP</h4><h5 id="3-2-2-1-Spring-AOP的支持"><a href="#3-2-2-1-Spring-AOP的支持" class="headerlink" title="3.2.2.1 Spring AOP的支持"></a>3.2.2.1 Spring AOP的支持</h5><p><strong>Spring提供了4种类型的AOP支持：</strong></p>
<ul>
<li>经典Spring Aop</li>
</ul>
<p>基于XML配置，使用ProxyFactoryBean生成代理对象，相对纯POJO切面和基于注解的AOP，Spring经典的AOP看起来比较笨重和过于复杂。</p>
<ul>
<li>纯POJO 切面</li>
</ul>
<p>借助Spring的aop命名空间，我们可以将纯POJO转换为切面。实际上，这些POJO只是提供了满足切点条件时所要调用的方法。遗憾的是，这种技术需要XML配置，但这的确是声明式地将对象转换为切面的简便方式。</p>
<ul>
<li>@Aspect 注解驱动的切面</li>
</ul>
<p>Spring借鉴了AspectJ的切面，以提供注解驱动的AOP。本质上，它依然是Spring基于代理的AOP，但是编程模型几乎与编写成熟的AspectJ注解切面完全一致。这种AOP风格的好处在于能够不使用XML来完成功能。</p>
<ul>
<li>注入式 Aspect 切面</li>
</ul>
<p>如果AOP的<strong>切点要求不只是方法</strong>（如构造器或属性拦截），那么需要考虑使用AspectJ来实现切面。</p>
<p>前三种都是Spring AOP实现的变体。Spring AOP构建在动态代理基础之上，因此，Spring对AOP的支持局限于方法拦截。</p>
<h5 id="3-2-2-2-工程依赖"><a href="#3-2-2-2-工程依赖" class="headerlink" title="3.2.2.2 工程依赖"></a>3.2.2.2 工程依赖</h5><p>Spring AOP是基于IOC的，在IOC的工程依赖基础上需要导入AOP相关的包，如果是Maven工程，则需 要加入以下依赖配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-aop aop必选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring-aspects：AOP必选，spring非经典AOP的依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--依赖传递导入：aspectjweaver--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Spring-AOP 最小类库需求：</strong></p>
<table>
<thead>
<tr>
<th>JAR</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>spring-aop-4.3.8.RELEASE.jar</td>
<td></td>
</tr>
<tr>
<td>spring-aspects-4.3.8.RELEASE.jar</td>
<td></td>
</tr>
<tr>
<td>aspectjweaver-1.8.9.jar</td>
<td>解析切点定义表达式的依赖包</td>
</tr>
</tbody></table>
<h5 id="3-2-2-3-配置文件"><a href="#3-2-2-3-配置文件" class="headerlink" title="3.2.2.3 配置文件"></a>3.2.2.3 配置文件</h5><p>选择什么风格的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>XML风格对现有的Spring用户来说更加习惯,而且从配置中可以清晰的表明在系统中存在那些切 面。但是有如下的缺点： 它不能完全将需求实现的地方封装到一个位置。 XML风格同@AspectJ风格所能表达的内容相比有更多的限制。</li>
<li>@AspectJ风格支持其它的实例模型以及更丰富的连接点组合。它具有将切面保持为一个模块单元的优点。 还有一个优点是@AspectJ切面能被Spring AOP和AspectJ两者都理解，可以迁移到 AspectJ的AOP。</li>
</ol>
<h4 id="3-2-3-AOP-的实现"><a href="#3-2-3-AOP-的实现" class="headerlink" title="3.2.3 AOP 的实现"></a>3.2.3 AOP 的实现</h4><h5 id="3-2-3-1-经典AOP"><a href="#3-2-3-1-经典AOP" class="headerlink" title="3.2.3.1 经典AOP"></a>3.2.3.1 经典AOP</h5><p>完全基于XML进行配置，通知需要实现对应的接口</p>
<ol>
<li><strong>获取上下文</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2020/12/24 19:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextAop</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= Logger.getLogger(SpringContextAop.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext_aop.xml&quot;</span>);</span><br><span class="line">        IHelloService helloService = context.getBean(<span class="string">&quot;helloService&quot;</span>, IHelloService.class);</span><br><span class="line">        helloService.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>applicaitonContext_aop.xml</strong></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 目标对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloServiceTarget&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.brendan.app.service.HelloService&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前置通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beforeAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.brendan.app.config.MyMethodBeforeAdvice&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ******** 对接口进行代理 ******** --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将每一个连接点都当做切点，（拦截每一个方法）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 需要代理的接口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interfaces&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.brendan.app.service.IHelloService&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定目标对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;helloServiceTarget&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 被应用的通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>beforeAdvice<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>定义通知</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/10 14:58</span></span><br><span class="line"><span class="comment"> * 前置通知</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMethodBeforeAdvice</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LogManager.getLogger(MyMethodBeforeAdvice.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span>  </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Before Advice Method =&gt; &quot;</span> + method.getName() +</span><br><span class="line">                <span class="string">&quot; args =&gt; &quot;</span> + args.length +</span><br><span class="line">                <span class="string">&quot; Target Object Class =&gt; &quot;</span> + target.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/22/SSM/spring/image-20210110161114504.png" alt="image-20210110161114504"></p>
<p><img src="/2021/01/22/SSM/spring/image-20210110161013041.png" alt="image-20210110161013041"></p>
<p>==<code>&lt;property name=&quot;proxyTargetClass&quot; value=&quot;true&quot;/&gt;</code> 使用cglib代理来进行测试， value 属性值为 true 时，表示使用 CGLIB 代理，属性值为 false 时，表示使用 JDK 动态代理==</p>
<h5 id="3-2-3-2-纯POJO切面"><a href="#3-2-3-2-纯POJO切面" class="headerlink" title="3.2.3.2 纯POJO切面"></a>3.2.3.2 纯POJO切面</h5><p>通知不需要实现相关接口，只是一个简单的java类，<strong>切点和切面的定义在XML中</strong>。</p>
<p>由于spring在<strong>解析切点的定义时</strong>(org.springframework.aop.aspectj.AspectJExpressionPointcut)，<strong>使用的是aspectj的工具类</strong>，所以需要导入aspectjweaver.jar。 如果被代理的目标对象实现了至少一个接口，则会使用<strong>JDK动态代理</strong>。所有该目标类型实现的接口都将 被代理。 若该目标对象没有实现任何接口，则创建一个<strong>CGLIB代理</strong>。也可以通过proxy-target-class调整。cglib的相关类文件打包在了spring-core-*.RELEASE.jar中。</p>
<blockquote>
<p>POJO :  Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBean</p>
</blockquote>
<ol>
<li><strong>获取上下文</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/16 14:57</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = </span><br><span class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserService userService =(UserService) applicationContext.getBean(<span class="string">&quot;userServiceImpl&quot;</span>);</span><br><span class="line">        userService.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>applicationContext.xml</strong></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 纯POJO切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;traceLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.spring.pojo.TraceLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--proxy-target-class=&quot;false&quot; 是否代理目标类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义一个切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;traceLog&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 声明一个切入点 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;addAllMethod&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.demo.spring.service.impl.UserServiceImpl.*())&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 前置通知 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;addAllMethod&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.spring.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>切点定义表达式</strong></p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;execution(&lt;修饰符模式&gt; ? &lt;返回值模式&gt; &lt;方法名模式&gt;(&lt;参数模式&gt;) &lt;异常模式&gt;?)</span><br></pre></td></tr></table></figure>

<ol>
<li>各部分说明： </li>
</ol>
<ul>
<li>修饰符模式: 可选，如public、protected; </li>
<li><strong>返回值类型</strong>: 可以是任何类型模式; </li>
<li><strong>方法名</strong>: 可以使用“*”进行模式匹配； </li>
<li><strong>参数列表</strong>: “()”表示方法没有任何参数; </li>
<li>异常列表: 可选，以“throws 异常全限定名列表”声明，异常全限定名列表如有多个 以“，”分割，如throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException。</li>
</ul>
<p>注意：除了返回类型模式、方法名模式和参数模式外，其它项都是可选的。</p>
<ol start="2">
<li><p>类型匹配的通配符：</p>
<p><code>*</code> ：匹配任何数量字符； <code>.. </code>：匹配任何数量字符重复，如在的类型模式中匹配任何数量子包；而在方法参数模式中匹配任何数量参数。 <code>+</code> ：匹配指定类型的子类型；仅能作为后缀放在类型模式后边。</p>
<blockquote>
<p><em>例如：</em></p>
<ul>
<li><p><code>java.lang.String</code> ：匹配String类型； </p>
</li>
<li><p><code>java.*.String </code>： 匹配java包下的任何“一级子包”下的String类型； 如匹配 java.lang.String，但不匹配java.lang.ss.String * </p>
</li>
<li><p><code>java..</code> ：匹配java包及任何子包下的任何类型; 如匹配 java.lang.annotation.Annotation 、java.lang.String、 </p>
</li>
<li><p><code>java.lang.*ing</code> 匹配任何java.lang包下的以ing结尾的类型；</p>
</li>
<li><p><code>java.lang.Number+</code> 匹配java.lang包下的任何Number的子类型；如匹配 java.lang.Integer，也匹配java.math.BigInteger</p>
</li>
</ul>
</blockquote>
</li>
</ol>
</blockquote>
<ol start="3">
<li><strong>TraceLog.java</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.spring.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.istack.internal.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/16 17:29</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceLog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= Logger.getLogger(TraceLog.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot; 前置通知 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot; 后置通知 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object retVal)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot; 返回通知 ，返回值= &gt; &quot;</span>+ (retVal == <span class="keyword">null</span>? <span class="string">&quot;&quot;</span>: retVal.toString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Exception ex)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot; 异常通知 : 异常信息=&gt; &quot;</span> + ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot; 环绕通知 : 代理目标 =&gt; &quot;</span> + proceedingJoinPoint.getTarget().getClass());</span><br><span class="line">        <span class="keyword">return</span> proceedingJoinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-2-3-3-AspectJ-切面"><a href="#3-2-3-3-AspectJ-切面" class="headerlink" title="3.2.3.3 @AspectJ 切面"></a>3.2.3.3 @AspectJ 切面</h5><p>AspectJ 5使用了Java注解定义切面，Spring 使用了和AspectJ 5一样的注解，并使用AspectJ来做切入点 解析和匹配。 但是，AOP在运行时仍旧是纯的Spring AOP，并不依赖于AspectJ的编译器或者织入器 （weaver）。</p>
<p>启用@AspectJ注解定义aop: </p>
<p>1:通过在Spring的配置中引入下列元素来启用Spring对@AspectJ的支持：<code>&lt;aop:aspectj-autoproxy/&gt;</code> ，该配置告诉Spring容器，AOP要通过注解来定义，注解信息在加入 @Aspect注解的类中 。</p>
<p>2:AOP并不知道切面的定义在哪些类里，所以需要让Spring容器创建包含切面定义类的实例，从而找到切面定义： </p>
<p><code>&lt;bean id=&quot;traceLog&quot; class=&quot;com.demo.spring.aspectj.TraceLog&quot; /&gt;</code></p>
<p>当让也可以在配置类中同时加入@Component注解，由Spring的自动扫描类扫描AOP注解定义所在的 类，然后注册到上下文。</p>
<ol>
<li><strong>获取上下文</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/16 14:57</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = </span><br><span class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext_aspectj.xml&quot;</span>);</span><br><span class="line">        UserService userService =(UserService) applicationContext.getBean(<span class="string">&quot;userServiceImpl&quot;</span>);</span><br><span class="line">        userService.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>切点定义类</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/16 18:07</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceLog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= Logger.getLogger(TraceLog.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Baohua</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 这个切点定义了spring包下任意的service实现类的任意方法</span></span><br><span class="line"><span class="comment">     * 如 ；com.demo.spring.service.impl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 18:15 2021/1/16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.demo.spring..service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">businessService</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Baohua</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 使用已命名的切点，也可以使用内置的切入点表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 18:17 2021/1/16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;com.demo.spring.aspectj.TraceLog.businessService()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot; ---- before ----  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>applicationContext_aspectj.xml</strong></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过aop命名空间的&lt;aop:aspectj-autoproxy /&gt;声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动代理是指Spring会判断一个bean是否使用了一个或多个切面通知，并据此自动生成相应的代理以拦截其方法调用，并且确保通知在需要时执行。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring不会自动扫描切面定义类TraceLog，需要在Spring中注册为Bean才可以,或者启用组件自动扫描，并且在切面定义类中使用@Component注解 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;traceLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.spring.aspectj.TraceLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.spring.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="3-2-4-代理模式"><a href="#3-2-4-代理模式" class="headerlink" title="3.2.4 代理模式"></a>3.2.4 代理模式</h4><p>为其他对象提供一种代理以控制对这个对象的访问。</p>
<p><img src="/2021/01/22/SSM/spring/fb35a9062e294561859e6277ecb6c6ae.png" alt="img"></p>
<h5 id="3-2-4-1-静态代理"><a href="#3-2-4-1-静态代理" class="headerlink" title="3.2.4.1 静态代理"></a>3.2.4.1 静态代理</h5><p>静态代理是由程序员创建或工具生成代理类的源码，再编译代理类。所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。</p>
<ol>
<li><strong>Client.java</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/16 18:32</span></span><br><span class="line"><span class="comment"> * 静态代理演示代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RoleService roleService = <span class="keyword">new</span> ProxyRoleService(<span class="keyword">new</span> RoleServiceImpl());</span><br><span class="line">        roleService.addRole(<span class="number">101</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>RoleService.java</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/16 18:26</span></span><br><span class="line"><span class="comment"> * 接口 ， 由目标类和代理类实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addRole</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>ProxyRoleService.java</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/16 18:28</span></span><br><span class="line"><span class="comment"> * 代理类， 拦截目标方法的调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyRoleService</span> <span class="keyword">implements</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RoleServiceImpl roleService = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyRoleService</span><span class="params">(RoleServiceImpl roleService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleService = roleService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRole</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">        roleService.addRole(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><strong>RoleServiceImpl.java</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/16 18:26</span></span><br><span class="line"><span class="comment"> * 目标类，被代理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRole</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; addRole : id -&gt; &quot;</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-2-4-2-动态代理"><a href="#3-2-4-2-动态代理" class="headerlink" title="3.2.4.2 动态代理"></a>3.2.4.2 动态代理</h5><p>动态代理是指在实现阶段不用关心代理类，代理类在运行阶段动态生成。</p>
<p><strong>JDK动态代理</strong>是面向<strong>接口</strong>的，InvocationHandler 和 Proxy 只能为接口创建实例。</p>
<p><strong>Cglib动态代理</strong>，对代理对象类的class文件加载进来，修改字节码，MethodInterceptor</p>
<ol>
<li><strong>JDK动态代理</strong></li>
</ol>
<p><strong>Client.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RoleService roleService = (RoleService) Factory.create(RoleService.class, <span class="keyword">new</span> RoleServiceImpl());</span><br><span class="line">        roleService.addRole(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Factory.class</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/16 18:38</span></span><br><span class="line"><span class="comment"> * 根据传入的接口class 和 对应的实现类实例生成代理对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">create</span><span class="params">(Class&lt;?&gt; superClass, Object target)</span> </span>&#123;</span><br><span class="line">        Handler handler = <span class="keyword">new</span> Handler(target);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@author</span> Baohua</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@description</span>: 动态生成代理对象</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span>: Factory.class.getClassLoader() 类加载器</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span>: new Class[]&#123;superClass&#125; 接口对应的class</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span>: handler 调用拦截器</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@date</span>: 18:53 2021/1/16</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(Factory.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;superClass&#125;, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Handler.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/16 18:40</span></span><br><span class="line"><span class="comment"> * 调用拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object targetObject = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Object targetObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.targetObject=targetObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; ------Handler --- 执行方法调用前------- &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;addRole&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = (<span class="keyword">int</span>) args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (id&gt;<span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Object obj = method.invoke(targetObject, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------- Handler --- 方法执行后------------&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>Cglib动态代理</strong></li>
</ol>
<p>JDK动态代理要求被代理对象至少实现一个接口，如果被代理对象没有实现接口，则需要通过字节码工 具生成一个代理类，cglib使用ASM生成代理类。</p>
<p><strong>Client.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// cglib动态代理</span></span><br><span class="line">        RoleService roleService = (RoleService) MyFactory.create(RoleServiceImpl.class);</span><br><span class="line">        roleService.addRole(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>MyFactory.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/16 19:05</span></span><br><span class="line"><span class="comment"> * 根据传入的接口名称或对应的实现类实例生成代理对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">create</span><span class="params">(Class&lt;?&gt; superClass)</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(superClass);</span><br><span class="line">        <span class="comment">// 回调方法</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> Interceptor());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态生成代理类</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Interceptor.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/16 19:11</span></span><br><span class="line"><span class="comment"> * 目标对象拦截器，实现MethodInterceptor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Baohua</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 由CGLib动态生成的代理类实例，</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method Method为上文中实体类所调用的被代理的方法引用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects Object[]为参数值列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy 为生成的代理类对方法的代理引用。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 从代理实例的方法调用返回的值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------Interceptor---&gt;方法调用前--------------&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;addRole&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = (<span class="keyword">int</span>) objects[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (id&gt;<span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Object o = methodProxy.invokeSuper(obj, objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------Interceptor---&gt;方法调用后--------------&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-DAO-Data-Access-Object-支撑"><a href="#3-3-DAO-Data-Access-Object-支撑" class="headerlink" title="3.3 DAO (Data Access Object) 支撑"></a>3.3 DAO (Data Access Object) 支撑</h3><h4 id="3-3-1-数据访问整合"><a href="#3-3-1-数据访问整合" class="headerlink" title="3.3.1 数据访问整合"></a>3.3.1 数据访问整合</h4><p>Spring提供的DAO(数据访问对象)支持主要的目的是便于以标准的方式使用不同的数据访问技术，不仅可以方便地在这些持久化技术间切换， 而且在编码的时候不用考虑处理各种技术中特定的异常。</p>
<ol>
<li>一致的异常体系 Spring提供了一种方便的方法，把特定于某种技术的异常，如SQLException， 转化为自己的异常，这种异常属于以DataAccessException 为根的异常层次。这些异常封装了原始异常对象，这样就不会有丢失任何错误信息的风险。 </li>
<li>一致的DAO支持抽象类 为了便于以一种一致的方式使用各种数据访问技术，如JDBC、JDO和 Hibernate， Spring提供了一套抽象DAO类供你扩展。这些抽象类提供了一些方法，通过它们你可以获得与你当前使用的数据访问技术相关的数据源和其他配置信息。</li>
</ol>
<h5 id="3-3-1-1-工程依赖"><a href="#3-3-1-1-工程依赖" class="headerlink" title="3.3.1.1 工程依赖"></a>3.3.1.1 工程依赖</h5><p>Spring DAO支撑是基于IOC和AOP的，在IOC和AOP的工程依赖基础上需要导入DAO支撑相关的包，如果是Maven工程，则需要加入以下依赖配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-jdbc 必选：spring jdbc整合包--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 依赖传递导入：spring-tx --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mysql-jdbc：必选--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>Spring-DAO支撑的最小类库需求：</strong></p>
<table>
<thead>
<tr>
<th>JAR</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>spring-jdbc-4.3.8.RELEASE.jar</td>
<td></td>
</tr>
<tr>
<td>spring-tx-4.3.8.RELEASE.jar</td>
<td></td>
</tr>
<tr>
<td>jdbc驱动</td>
<td></td>
</tr>
</tbody></table>
<h5 id="3-3-1-2-配置文件"><a href="#3-3-1-2-配置文件" class="headerlink" title="3.3.1.2 配置文件"></a>3.3.1.2 配置文件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-3-2-整合JDBC"><a href="#3-3-2-整合JDBC" class="headerlink" title="3.3.2 整合JDBC"></a>3.3.2 整合JDBC</h4><ol>
<li><strong>applicationContext_jdbc.xml</strong></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Mysql配置驱动，url，username，password--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Jdbc Template--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--UserDao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.srping.dao.impl.UserDao&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jdbcTemplate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--UserDao2--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.srping.dao.impl.UserDao2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>获取上下文 JdbcApplicaiton.java</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext_jdbc.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// userDao</span></span><br><span class="line">        UserDao userDao = applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>, UserDao.class);</span><br><span class="line">        userDao.addUser(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="comment">// userDao2</span></span><br><span class="line">        UserDao2 userDao2 = applicationContext.getBean(<span class="string">&quot;userDao2&quot;</span>, UserDao2.class);</span><br><span class="line">        userDao2.addUser(<span class="string">&quot;lisi&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>UserDao.java</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/17 13:00</span></span><br><span class="line"><span class="comment"> * 使用模板辅助类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into users(name,age) values(&quot;</span> + <span class="string">&quot;&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;,&quot;</span> + age +<span class="string">&quot;)&quot;</span>;</span><br><span class="line">        jdbcTemplate.execute(sql);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><strong>UserDao2.java</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/17 13:10</span></span><br><span class="line"><span class="comment"> * 使用支持类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao2</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into users(name,age) values(&quot;</span> + <span class="string">&quot;&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;,&quot;</span> + age +<span class="string">&quot;)&quot;</span>;</span><br><span class="line">        <span class="keyword">super</span>.getJdbcTemplate().execute(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-3-3-事务管理"><a href="#3-3-3-事务管理" class="headerlink" title="3.3.3 事务管理"></a>3.3.3 事务管理</h4><p>Spring基于APO提供了事务管理，框架的事务支持提供了一致的事务管理抽象，这带来了以下好处：</p>
<ol>
<li>为复杂的事务API提供了一致的编程模型，如JTA、JDBC、Hibernate、JPA和JDO </li>
<li>提供比大多数复杂的事务API（诸如JTA）更简单的，更易于使用的编程式事务管理API </li>
<li><strong>支持声明式事务管理</strong> </li>
<li><strong>与Spring的各种数据访问抽象完美结合</strong></li>
</ol>
<h5 id="3-3-3-1-声明式事务"><a href="#3-3-3-1-声明式事务" class="headerlink" title="3.3.3.1 声明式事务"></a>3.3.3.1 声明式事务</h5><h6 id="3-3-3-1-1-基于XML配置的事务"><a href="#3-3-3-1-1-基于XML配置的事务" class="headerlink" title="3.3.3.1.1 基于XML配置的事务"></a>3.3.3.1.1 基于XML配置的事务</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx/spring-tx.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:oracle:thin:@localhost:1521:ORCL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hr&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hr&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务通知 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事务属性：</span></span><br><span class="line"><span class="comment">        name：与事务属性关联的方法名。通配符（*）可以用来指定一批关联到相同的事务属性的方法。</span></span><br><span class="line"><span class="comment">        propagation：事务传播行为 ,默认REQUIRED,如当前没有transaction，则创建新的transaction；</span></span><br><span class="line"><span class="comment">        read-only：事务是否只读？，默认false</span></span><br><span class="line"><span class="comment">        isolation：事务隔离级别，默认DEFAULT，使用数据库默认的事务隔离级别。</span></span><br><span class="line"><span class="comment">        rollback-for：将被触发进行回滚的 Exception(s),以逗号分开。默认RuntimeException及Error会被回滚。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 所有add开头的方法使用只读事务 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;create*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.RuntimeException&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--其他方法使用默认的事务设置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在所有service代码中织入事务通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.demo.srping.service.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;service&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.srping.dao.impl.UserDao&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jdbcTemplate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.srping.service.impl.UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="3-3-3-1-2-基于注解配置的事务"><a href="#3-3-3-1-2-基于注解配置的事务" class="headerlink" title="3.3.3.1.2 基于注解配置的事务"></a>3.3.3.1.2 基于注解配置的事务</h6><p>将事务通知和切面的定义放入了java代码中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx/spring-tx.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:oracle:thin:@localhost:1521:ORCL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hr&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hr&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"> 	<span class="comment">&lt;!-- 使用annotation注解方式配置事务 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在Service的方法或者类加入@Transactional注解，该注解默认的设置如下： --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- **传播行为: PROPAGATION_REQUIRED. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- **隔离级别:ISOLATION_DEFAULT. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- **读写:读/写。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- **事务超时默认为基础事务系统的默认超时，如果不支持超时，则默认为none。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- **任何RuntimeException、Error都会触发回滚，而任何检查Exception都不会触发回滚。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="四、脱离XML配置Spring"><a href="#四、脱离XML配置Spring" class="headerlink" title="四、脱离XML配置Spring"></a>四、脱离XML配置Spring</h2><h3 id="4-1-XML-和-注解混合使用"><a href="#4-1-XML-和-注解混合使用" class="headerlink" title="4.1 XML 和 注解混合使用"></a>4.1 XML 和 注解混合使用</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:oracle:thin:@localhost:1521:ORCL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hr&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hr&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事务切面由@Transactional定义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="4-2-注解-和-Java代码使用"><a href="#4-2-注解-和-Java代码使用" class="headerlink" title="4.2 注解 和 Java代码使用"></a>4.2 注解 和 Java代码使用</h3><p>Spring3开始支持通过Java代码来配置Spring，Spring的配置可以完全脱离XML，通过注释和Java代码来 配置，常用注释如下：</p>
<ol>
<li>@Configuration，表明当前类提供Spring配置文件的作用，Spring上下文会从当前类的注解中提取配置信息</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>相当于一个配置文件</p>
</blockquote>
<ol start="2">
<li>@Import，导入其他类提供配置信息，也可以在初始化上下文时指定多个</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@Import(JdbcConfig.class)</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li> @ComponentScan， 开启组件扫描</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.demo.spring&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>相当于： &lt;context:component-scan base-package=”com.demo.spring” /&gt;</p>
</blockquote>
<ol start="4">
<li> @EnableAspectJAutoProxy，启用@AspectJ切面</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.demo.spring&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>相当于：&lt;aop:aspectj-autoproxy /&gt;</p>
</blockquote>
<ol start="5">
<li>@EnableTransactionManagement ，启用注解事务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.demo.spring&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>相当于：&lt;tx:annotation-driven /&gt;</p>
</blockquote>
<ol start="6">
<li> @ImportResource，导入XML格式的配置文件</li>
</ol>
<blockquote>
<p>XML配置文件的名称空间特有标签使用起来比较方便，可以使用这种方式与Java API方式混合使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.demo.spring&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:/com/demo/spring/config/properties-config.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="7">
<li> @PropertySource，导入属性资源</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.demo.spring&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:/com/demo/spring/config/properties-config.xml&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>相当于： &lt;context:property-placeholder location=”classpath:jdbc.properties”/&gt;</p>
</blockquote>
<ol start="8">
<li> @Bean，放在方法前，表示该方法返回一个对象实例</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.demo.spring&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:/com/demo/spring/config/properties-config.xml&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示这个方法实例化一个bean，id=user,同方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示这个方法实例化一个bean，id=user2,指定name</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;user2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;user3&quot;)</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span> <span class="comment">// bean的范围</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;user4&quot;)</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span> <span class="comment">// bean的范围</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	User user4=<span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">//可以引用其他@bean方法实例化的对象，如果同类型只有一个实例，最好通过参数传入</span></span><br><span class="line">   		user4.setInnerUser(user3());</span><br><span class="line">    	<span class="keyword">return</span> user4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>相当于: <bean id="user" class="com.brendan.app.model.User"></bean></p>
<p><strong>注意：</strong>如果@Bean方法返回的是实现BeanPostProcessor或者BeanFactoryPostProcessor 接口的bean，则该方法在容器初始化阶段被调用，如果@Bean方法是非静态方法，会导致 AppConfig提前实例化。 提前实例化会导致AppConfig实例的增强失败，本类中的 @Value、@Autowired失效</p>
</blockquote>
<ol start="9">
<li> @Value，使用上下文中的属性</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.demo.spring&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:/com/demo/spring/config/properties-config.xml&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><em>示例：</em></p>
<p><strong>JdbcConfig.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/17 15:01</span></span><br><span class="line"><span class="comment"> * 事务配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driverClassName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Baohua</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 配置数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 15:05 2021/1/17</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DriverManagerDataSource managerDataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        managerDataSource.setDriverClassName(driverClassName);</span><br><span class="line">        managerDataSource.setUrl(url);</span><br><span class="line">        managerDataSource.setUsername(username);</span><br><span class="line">        managerDataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> managerDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Baohua</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 配置 JdbcTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 15:05 2021/1/17</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        <span class="comment">//调用dataSource()，相当于获取dataSource() 定义的bean，多次调用不会生成多个实例</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Baohua</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 基于java的配置中，事务管理器的默认名称为txManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 15:06 2021/1/17</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">txManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>AppConfig.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.demo.spring.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/17 14:44</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.demo.spring&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="comment">//@ImportResource(&quot;classpath:/com/demo/spring/config/properties-config.xml&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示这个方法实例化一个bean，id=user,同方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示这个方法实例化一个bean，id=user2,指定name</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;user2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;user3&quot;)</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span> <span class="comment">// bean的范围</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Bean(name = &quot;user4&quot;)</span></span><br><span class="line"><span class="comment">    @Scope(&quot;prototype&quot;) // bean的范围</span></span><br><span class="line"><span class="comment">    public User user4() &#123;</span></span><br><span class="line"><span class="comment">        User user4=new User();</span></span><br><span class="line"><span class="comment">//可以引用其他@bean方法实例化的对象，如果同类型只有一个实例，最好通过参数传入</span></span><br><span class="line"><span class="comment">        user4.setInnerUser(user3());</span></span><br><span class="line"><span class="comment">        return user4;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>TraceLog.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.istack.internal.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Brendan Li on 2021/1/17 15:31</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaoHua</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceLog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= Logger.getLogger(TraceLog.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TraceLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;TraceLog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.demo.spring.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>UserService.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===addUser===  ,id : &quot;</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>UserDao.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into users(name,age) values(&quot;</span> + <span class="string">&quot;&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;,&quot;</span> + age +<span class="string">&quot;)&quot;</span>;</span><br><span class="line">        jdbcTemplate.execute(sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="五、Spring-Test-与-Junit"><a href="#五、Spring-Test-与-Junit" class="headerlink" title="五、Spring Test 与 Junit"></a>五、Spring Test 与 Junit</h2><a href="/2021/01/24/SSM/spring-junit/" title="[spring-test,junit] [请点击]">[spring-test,junit] [请点击]</a>

<h2 id="六、-Spring-Web"><a href="#六、-Spring-Web" class="headerlink" title="六、 Spring-Web"></a>六、 Spring-Web</h2><a href="/2021/01/24/SSM/spring-web/" title="[spring-web] [请点击]">[spring-web] [请点击]</a>

<h2 id="七、-与其他框架集成"><a href="#七、-与其他框架集成" class="headerlink" title="七、 与其他框架集成"></a>七、 与其他框架集成</h2><h3 id="7-1-集成-Mybatis"><a href="#7-1-集成-Mybatis" class="headerlink" title="7.1 集成 Mybatis"></a>7.1 集成 Mybatis</h3><h4 id="7-1-1-基于XML的配置"><a href="#7-1-1-基于XML的配置" class="headerlink" title="7.1.1 基于XML的配置"></a>7.1.1 基于XML的配置</h4><h4 id="7-1-2-基于Java的配置"><a href="#7-1-2-基于Java的配置" class="headerlink" title="7.1.2 基于Java的配置"></a>7.1.2 基于Java的配置</h4><a href="/2021/01/24/SSM/spring-mybaits/" title="[集成Mybatis] [请点击]">[集成Mybatis] [请点击]</a>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
